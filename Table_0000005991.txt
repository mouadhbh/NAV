OBJECT Table 5991 Service Shipment Line
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    Permissions=TableData 32=r,
                TableData 5802=r;
    CaptionML=[ENU=Service Shipment Line;
               FRA=Ligne expÇdition service];
    PasteIsValid=No;
    LookupPageID=Page5949;
  }
  FIELDS
  {
    { 2   ;   ;Customer No.        ;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Customer No.;
                                                              FRA=N¯ client];
                                                   Editable=No }
    { 3   ;   ;Document No.        ;Code20        ;TableRelation="Service Shipment Header".No.;
                                                   CaptionML=[ENU=Document No.;
                                                              FRA=N¯ document] }
    { 4   ;   ;Line No.            ;Integer       ;CaptionML=[ENU=Line No.;
                                                              FRA=N¯ ligne] }
    { 5   ;   ;Type                ;Option        ;CaptionML=[ENU=Type;
                                                              FRA=Type];
                                                   OptionCaptionML=[ENU=" ,Item,Resource,Cost,G/L Account";
                                                                    FRA=" ,Article,Ressource,Coñt,Compte gÇnÇral"];
                                                   OptionString=[ ,Item,Resource,Cost,G/L Account] }
    { 6   ;   ;No.                 ;Code20        ;TableRelation=IF (Type=CONST(" ")) "Standard Text"
                                                                 ELSE IF (Type=CONST(Item)) Item
                                                                 ELSE IF (Type=CONST(Resource)) Resource
                                                                 ELSE IF (Type=CONST(Cost)) "Service Cost"
                                                                 ELSE IF (Type=CONST(G/L Account)) "G/L Account";
                                                   CaptionML=[ENU=No.;
                                                              FRA=N¯] }
    { 7   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              FRA=Code magasin] }
    { 8   ;   ;Posting Group       ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Inventory Posting Group";
                                                   CaptionML=[ENU=Posting Group;
                                                              FRA=Groupe comptabilisation] }
    { 11  ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              FRA=DÇsignation] }
    { 12  ;   ;Description 2       ;Text50        ;CaptionML=[ENU=Description 2;
                                                              FRA=DÇsignation 2] }
    { 13  ;   ;Unit of Measure     ;Text10        ;CaptionML=[ENU=Unit of Measure;
                                                              FRA=UnitÇ] }
    { 15  ;   ;Quantity            ;Decimal       ;CaptionML=[ENU=Quantity;
                                                              FRA=QuantitÇ];
                                                   DecimalPlaces=0:5 }
    { 22  ;   ;Unit Price          ;Decimal       ;CaptionML=[ENU=Unit Price;
                                                              FRA=Prix unitaire];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code";
                                                   CaptionClass=GetCaptionClass(FIELDNO("Unit Price")) }
    { 23  ;   ;Unit Cost (LCY)     ;Decimal       ;CaptionML=[ENU=Unit Cost (LCY);
                                                              FRA=Coñt unitaire DS];
                                                   AutoFormatType=2 }
    { 25  ;   ;VAT %               ;Decimal       ;CaptionML=[ENU=VAT %;
                                                              FRA=% TVA];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 27  ;   ;Line Discount %     ;Decimal       ;CaptionML=[ENU=Line Discount %;
                                                              FRA=% remise ligne];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 32  ;   ;Allow Invoice Disc. ;Boolean       ;InitValue=Yes;
                                                   CaptionML=[ENU=Allow Invoice Disc.;
                                                              FRA=Remise facture autorisÇe] }
    { 34  ;   ;Gross Weight        ;Decimal       ;CaptionML=[ENU=Gross Weight;
                                                              FRA=Poids brut];
                                                   DecimalPlaces=0:5 }
    { 35  ;   ;Net Weight          ;Decimal       ;CaptionML=[ENU=Net Weight;
                                                              FRA=Poids net];
                                                   DecimalPlaces=0:5 }
    { 36  ;   ;Units per Parcel    ;Decimal       ;CaptionML=[ENU=Units per Parcel;
                                                              FRA=Conditionnement];
                                                   DecimalPlaces=0:5 }
    { 37  ;   ;Unit Volume         ;Decimal       ;CaptionML=[ENU=Unit Volume;
                                                              FRA=Volume unitaire];
                                                   DecimalPlaces=0:5 }
    { 38  ;   ;Appl.-to Item Entry ;Integer       ;AccessByPermission=TableData 27=R;
                                                   CaptionML=[ENU=Appl.-to Item Entry;
                                                              FRA=êcr. article Ö lettrer] }
    { 39  ;   ;Item Shpt. Entry No.;Integer       ;CaptionML=[ENU=Item Shpt. Entry No.;
                                                              FRA=N¯ sÇquence expÇd. article] }
    { 40  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              FRA=Code raccourci axe 1];
                                                   CaptionClass='1,2,1' }
    { 41  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              FRA=Code raccourci axe 2];
                                                   CaptionClass='1,2,2' }
    { 42  ;   ;Customer Price Group;Code10        ;TableRelation="Customer Price Group";
                                                   CaptionML=[ENU=Customer Price Group;
                                                              FRA=Groupe prix client];
                                                   Editable=No }
    { 52  ;   ;Work Type Code      ;Code10        ;TableRelation="Work Type";
                                                   CaptionML=[ENU=Work Type Code;
                                                              FRA=Code type travail] }
    { 58  ;   ;Qty. Shipped Not Invoiced;Decimal  ;CaptionML=[ENU=Qty. Shipped Not Invoiced;
                                                              FRA=QtÇ livrÇe non facturÇe];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 61  ;   ;Quantity Invoiced   ;Decimal       ;CaptionML=[ENU=Quantity Invoiced;
                                                              FRA=QuantitÇ facturÇe];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 65  ;   ;Order No.           ;Code20        ;CaptionML=[ENU=Order No.;
                                                              FRA=N¯ commande] }
    { 66  ;   ;Order Line No.      ;Integer       ;CaptionML=[ENU=Order Line No.;
                                                              FRA=N¯ ligne commande] }
    { 68  ;   ;Bill-to Customer No.;Code20        ;TableRelation=Customer;
                                                   CaptionML=[ENU=Bill-to Customer No.;
                                                              FRA=N¯ client facturÇ];
                                                   Editable=No }
    { 74  ;   ;Gen. Bus. Posting Group;Code10     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=[ENU=Gen. Bus. Posting Group;
                                                              FRA=Groupe compta. marchÇ] }
    { 75  ;   ;Gen. Prod. Posting Group;Code10    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=[ENU=Gen. Prod. Posting Group;
                                                              FRA=Groupe compta. produit] }
    { 77  ;   ;VAT Calculation Type;Option        ;CaptionML=[ENU=VAT Calculation Type;
                                                              FRA=Mode calcul TVA];
                                                   OptionCaptionML=[ENU=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                                    FRA=Normal,Intracomm.,Correctif,Sales Tax];
                                                   OptionString=Normal VAT,Reverse Charge VAT,Full VAT,Sales Tax;
                                                   Editable=No }
    { 78  ;   ;Transaction Type    ;Code10        ;TableRelation="Transaction Type";
                                                   CaptionML=[ENU=Transaction Type;
                                                              FRA=Nature transaction] }
    { 79  ;   ;Transport Method    ;Code10        ;TableRelation="Transport Method";
                                                   CaptionML=[ENU=Transport Method;
                                                              FRA=Mode de transport] }
    { 80  ;   ;Attached to Line No.;Integer       ;CaptionML=[ENU=Attached to Line No.;
                                                              FRA=AttachÇ Ö la ligne n¯];
                                                   Editable=No }
    { 81  ;   ;Exit Point          ;Code10        ;TableRelation="Entry/Exit Point";
                                                   CaptionML=[ENU=Exit Point;
                                                              FRA=Pays destination] }
    { 82  ;   ;Area                ;Code10        ;TableRelation=Area;
                                                   CaptionML=[ENU=Area;
                                                              FRA=DÇpt destination/provenance] }
    { 83  ;   ;Transaction Specification;Code10   ;TableRelation="Transaction Specification";
                                                   CaptionML=[ENU=Transaction Specification;
                                                              FRA=RÇgime] }
    { 85  ;   ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=[ENU=Tax Area Code;
                                                              FRA=Code zone recouvrement] }
    { 86  ;   ;Tax Liable          ;Boolean       ;CaptionML=[ENU=Tax Liable;
                                                              FRA=Soumis Ö recouvrement] }
    { 87  ;   ;Tax Group Code      ;Code10        ;TableRelation="Tax Group";
                                                   CaptionML=[ENU=Tax Group Code;
                                                              FRA=Code groupe taxes] }
    { 89  ;   ;VAT Bus. Posting Group;Code10      ;TableRelation="VAT Business Posting Group";
                                                   CaptionML=[ENU=VAT Bus. Posting Group;
                                                              FRA=Groupe compta. marchÇ TVA] }
    { 90  ;   ;VAT Prod. Posting Group;Code10     ;TableRelation="VAT Product Posting Group";
                                                   CaptionML=[ENU=VAT Prod. Posting Group;
                                                              FRA=Groupe compta. produit TVA] }
    { 91  ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   CaptionML=[ENU=Currency Code;
                                                              FRA=Code devise];
                                                   Editable=No }
    { 99  ;   ;VAT Base Amount     ;Decimal       ;CaptionML=[ENU=VAT Base Amount;
                                                              FRA=Montant base TVA];
                                                   AutoFormatType=1;
                                                   AutoFormatExpr="Currency Code" }
    { 100 ;   ;Unit Cost           ;Decimal       ;CaptionML=[ENU=Unit Cost;
                                                              FRA=Coñt unitaire];
                                                   AutoFormatType=2;
                                                   AutoFormatExpr="Currency Code" }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              FRA=ID ensemble de dimensions];
                                                   Editable=No }
    { 950 ;   ;Time Sheet No.      ;Code20        ;TableRelation="Time Sheet Header";
                                                   CaptionML=[ENU=Time Sheet No.;
                                                              FRA=N¯ feuille de temps] }
    { 951 ;   ;Time Sheet Line No. ;Integer       ;TableRelation="Time Sheet Line"."Line No." WHERE (Time Sheet No.=FIELD(Time Sheet No.));
                                                   CaptionML=[ENU=Time Sheet Line No.;
                                                              FRA=N¯ de ligne de la feuille de temps] }
    { 952 ;   ;Time Sheet Date     ;Date          ;TableRelation="Time Sheet Detail".Date WHERE (Time Sheet No.=FIELD(Time Sheet No.),
                                                                                                 Time Sheet Line No.=FIELD(Time Sheet Line No.));
                                                   CaptionML=[ENU=Time Sheet Date;
                                                              FRA=Date de la feuille de temps] }
    { 5402;   ;Variant Code        ;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Variant".Code WHERE (Item No.=FIELD(No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              FRA=Code variante] }
    { 5403;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   CaptionML=[ENU=Bin Code;
                                                              FRA=Code emplacement] }
    { 5404;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              FRA=QuantitÇ par unitÇ];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5407;   ;Unit of Measure Code;Code10        ;TableRelation=IF (Type=CONST(Item)) "Item Unit of Measure".Code WHERE (Item No.=FIELD(No.))
                                                                 ELSE "Unit of Measure";
                                                   CaptionML=[ENU=Unit of Measure Code;
                                                              FRA=Code unitÇ] }
    { 5415;   ;Quantity (Base)     ;Decimal       ;CaptionML=[ENU=Quantity (Base);
                                                              FRA=QuantitÇ (base)];
                                                   DecimalPlaces=0:5 }
    { 5458;   ;Qty. Shipped Not Invd. (Base);Decimal;
                                                   CaptionML=[ENU=Qty. Shipped Not Invd. (Base);
                                                              FRA=QtÇ livrÇe non facturÇe (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 5461;   ;Qty. Invoiced (Base);Decimal       ;CaptionML=[ENU=Qty. Invoiced (Base);
                                                              FRA=QuantitÇ facturÇe (base)];
                                                   DecimalPlaces=0:5 }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center";
                                                   CaptionML=[ENU=Responsibility Center;
                                                              FRA=Centre de gestion] }
    { 5709;   ;Item Category Code  ;Code10        ;TableRelation="Item Category".Code;
                                                   CaptionML=[ENU=Item Category Code;
                                                              FRA=Code catÇgorie article] }
    { 5710;   ;Nonstock            ;Boolean       ;CaptionML=[ENU=Nonstock;
                                                              FRA=Non stockÇ] }
    { 5712;   ;Product Group Code  ;Code10        ;TableRelation="Product Group".Code WHERE (Item Category Code=FIELD(Item Category Code));
                                                   CaptionML=[ENU=Product Group Code;
                                                              FRA=Code groupe produits] }
    { 5817;   ;Correction          ;Boolean       ;CaptionML=[ENU=Correction;
                                                              FRA=Correction] }
    { 5901;   ;Appl.-to Warranty Entry;Integer    ;CaptionML=[ENU=Appl.-to Warranty Entry;
                                                              FRA=êcriture garantie lettrage] }
    { 5902;   ;Service Item No.    ;Code20        ;TableRelation="Service Item".No.;
                                                   CaptionML=[ENU=Service Item No.;
                                                              FRA=N¯ article de service] }
    { 5903;   ;Appl.-to Service Entry;Integer     ;CaptionML=[ENU=Appl.-to Service Entry;
                                                              FRA=Ecr. service Ö lettrer] }
    { 5904;   ;Service Item Line No.;Integer      ;CaptionML=[ENU=Service Item Line No.;
                                                              FRA=N¯ ligne article de service] }
    { 5905;   ;Service Item Serial No.;Code20     ;CaptionML=[ENU=Service Item Serial No.;
                                                              FRA=N¯ de sÇrie article de service] }
    { 5906;   ;Service Item Line Description;Text50;
                                                   CaptionML=[ENU=Service Item Line Description;
                                                              FRA=DÇsignation ligne article de service] }
    { 5908;   ;Posting Date        ;Date          ;CaptionML=[ENU=Posting Date;
                                                              FRA=Date comptabilisation] }
    { 5909;   ;Order Date          ;Date          ;CaptionML=[ENU=Order Date;
                                                              FRA=Date commande] }
    { 5910;   ;Needed by Date      ;Date          ;CaptionML=[ENU=Needed by Date;
                                                              FRA=Requis par date] }
    { 5916;   ;Ship-to Code        ;Code10        ;TableRelation="Ship-to Address".Code WHERE (Customer No.=FIELD(Customer No.));
                                                   CaptionML=[ENU=Ship-to Code;
                                                              FRA=Code destinataire] }
    { 5918;   ;Quantity Consumed   ;Decimal       ;CaptionML=[ENU=Quantity Consumed;
                                                              FRA=QuantitÇ consommÇe];
                                                   DecimalPlaces=0:5 }
    { 5920;   ;Qty. Consumed (Base);Decimal       ;CaptionML=[ENU=Qty. Consumed (Base);
                                                              FRA=QtÇ consommÇe (base)];
                                                   DecimalPlaces=0:5 }
    { 5928;   ;Service Price Group Code;Code10    ;TableRelation="Service Price Group";
                                                   CaptionML=[ENU=Service Price Group Code;
                                                              FRA=Code groupe tarifs service] }
    { 5929;   ;Fault Area Code     ;Code10        ;TableRelation="Fault Area";
                                                   CaptionML=[ENU=Fault Area Code;
                                                              FRA=Code zone panne] }
    { 5930;   ;Symptom Code        ;Code10        ;TableRelation="Symptom Code";
                                                   CaptionML=[ENU=Symptom Code;
                                                              FRA=Code symptìme] }
    { 5931;   ;Fault Code          ;Code10        ;TableRelation="Fault Code".Code WHERE (Fault Area Code=FIELD(Fault Area Code),
                                                                                          Symptom Code=FIELD(Symptom Code));
                                                   CaptionML=[ENU=Fault Code;
                                                              FRA=Code panne] }
    { 5932;   ;Resolution Code     ;Code10        ;TableRelation="Resolution Code";
                                                   CaptionML=[ENU=Resolution Code;
                                                              FRA=Code solution] }
    { 5933;   ;Exclude Warranty    ;Boolean       ;CaptionML=[ENU=Exclude Warranty;
                                                              FRA=Exclure garantie] }
    { 5934;   ;Warranty            ;Boolean       ;CaptionML=[ENU=Warranty;
                                                              FRA=Garantie] }
    { 5936;   ;Contract No.        ;Code20        ;TableRelation="Service Contract Header"."Contract No." WHERE (Contract Type=CONST(Contract));
                                                   CaptionML=[ENU=Contract No.;
                                                              FRA=N¯ contrat] }
    { 5938;   ;Contract Disc. %    ;Decimal       ;CaptionML=[ENU=Contract Disc. %;
                                                              FRA=% remise contrat];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5939;   ;Warranty Disc. %    ;Decimal       ;CaptionML=[ENU=Warranty Disc. %;
                                                              FRA=% remise garantie];
                                                   DecimalPlaces=0:5;
                                                   MinValue=0;
                                                   MaxValue=100 }
    { 5965;   ;Component Line No.  ;Integer       ;CaptionML=[ENU=Component Line No.;
                                                              FRA=N¯ ligne composant] }
    { 5966;   ;Spare Part Action   ;Option        ;CaptionML=[ENU=Spare Part Action;
                                                              FRA=Action piäce de rechange];
                                                   OptionCaptionML=[ENU=" ,Permanent,Temporary,Component Replaced,Component Installed";
                                                                    FRA=" ,Permanent,Temporaire,Composant remplacÇ,Composant installÇ"];
                                                   OptionString=[ ,Permanent,Temporary,Component Replaced,Component Installed] }
    { 5967;   ;Fault Reason Code   ;Code10        ;TableRelation="Fault Reason Code";
                                                   CaptionML=[ENU=Fault Reason Code;
                                                              FRA=Code motif panne] }
    { 5968;   ;Replaced Item No.   ;Code20        ;TableRelation=IF (Replaced Item Type=CONST(Item)) Item
                                                                 ELSE IF (Replaced Item Type=CONST(Service Item)) "Service Item";
                                                   CaptionML=[ENU=Replaced Item No.;
                                                              FRA=N¯ article remplacÇ] }
    { 5969;   ;Exclude Contract Discount;Boolean  ;CaptionML=[ENU=Exclude Contract Discount;
                                                              FRA=Exclure remise contrat] }
    { 5970;   ;Replaced Item Type  ;Option        ;CaptionML=[ENU=Replaced Item Type;
                                                              FRA=Type article remplacÇ];
                                                   OptionCaptionML=[ENU=" ,Service Item,Item";
                                                                    FRA=" ,Article service,Article"];
                                                   OptionString=[ ,Service Item,Item] }
    { 5994;   ;Price Adjmt. Status ;Option        ;CaptionML=[ENU=Price Adjmt. Status;
                                                              FRA=Statut ajust. prix];
                                                   OptionCaptionML=[ENU=" ,Adjusted,Modified";
                                                                    FRA=" ,AjustÇ,ModifiÇ"];
                                                   OptionString=[ ,Adjusted,Modified] }
    { 5997;   ;Line Discount Type  ;Option        ;CaptionML=[ENU=Line Discount Type;
                                                              FRA=Type remise ligne];
                                                   OptionCaptionML=[ENU=" ,Warranty Disc.,Contract Disc.,Line Disc.,Manual";
                                                                    FRA=" ,Remise garantie,Remise contrat,Remise ligne,Manuelle"];
                                                   OptionString=[ ,Warranty Disc.,Contract Disc.,Line Disc.,Manual] }
    { 5999;   ;Copy Components From;Option        ;CaptionML=[ENU=Copy Components From;
                                                              FRA=Copier les composants Ö partir de];
                                                   OptionCaptionML=[ENU=None,Item BOM,Old Service Item,Old Serv.Item w/o Serial No.;
                                                                    FRA=Aucun,Nomenclature article,Ancien article de service,Ancien article de serv. sans n¯ de sÇrie];
                                                   OptionString=None,Item BOM,Old Service Item,Old Serv.Item w/o Serial No. }
    { 6608;   ;Return Reason Code  ;Code10        ;TableRelation="Return Reason";
                                                   CaptionML=[ENU=Return Reason Code;
                                                              FRA=Code motif retour] }
    { 7001;   ;Allow Line Disc.    ;Boolean       ;CaptionML=[ENU=Allow Line Disc.;
                                                              FRA=Autoriser remise ligne] }
    { 7002;   ;Customer Disc. Group;Code20        ;TableRelation="Customer Discount Group";
                                                   CaptionML=[ENU=Customer Disc. Group;
                                                              FRA=Groupe rem. client] }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
    {    ;Order No.,Order Line No.                 }
    {    ;Item Shpt. Entry No.                     }
    {    ;Service Item No.,Type,Posting Date       }
    {    ;Customer No.                             }
    {    ;Bill-to Customer No.                     }
    {    ;Fault Reason Code                        }
    {    ;Contract No.                             }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text000@1001 : TextConst 'ENU=Shipment No. %1:;FRA=N¯ expÇdition %1 :';
      Text001@1000 : TextConst 'ENU=The program cannot find this Service line.;FRA=Le programme ne trouve pas cette ligne service.';
      Currency@1005 : Record 4;
      ServShptHeader@1004 : Record 5990;
      DimMgt@1003 : Codeunit 408;
      CurrencyRead@1002 : Boolean;

    LOCAL PROCEDURE GetCurrencyCode@1() : Code[10];
    BEGIN
      IF "Document No." = ServShptHeader."No." THEN
        EXIT(ServShptHeader."Currency Code");
      IF ServShptHeader.GET("Document No.") THEN
        EXIT(ServShptHeader."Currency Code");
      EXIT('');
    END;

    PROCEDURE ShowDimensions@25();
    BEGIN
      DimMgt.ShowDimensionSet("Dimension Set ID",
        STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."));
    END;

    PROCEDURE ShowItemTrackingLines@6500();
    VAR
      ItemTrackingDocMgt@1000 : Codeunit 6503;
    BEGIN
      ItemTrackingDocMgt.ShowItemTrackingForShptRcptLine(DATABASE::"Service Shipment Line",0,"Document No.",'',0,"Line No.");
    END;

    PROCEDURE InsertInvLineFromShptLine@2(VAR ServiceLine@1000 : Record 5902);
    VAR
      ServiceInvHeader@1011 : Record 5900;
      ServiceOrderHeader@1008 : Record 5900;
      ServiceOrderLine@1005 : Record 5902;
      Currency@1010 : Record 4;
      TempServiceLine@1002 : TEMPORARY Record 5902;
      ServDocReg@1013 : Record 5936;
      TransferOldExtLines@1007 : Codeunit 379;
      ItemTrackingMgt@1009 : Codeunit 6500;
      ExtTextLine@1006 : Boolean;
      NextLineNo@1001 : Integer;
    BEGIN
      SETRANGE("Document No.","Document No.");

      TempServiceLine := ServiceLine;
      IF ServiceLine.FIND('+') THEN
        NextLineNo := ServiceLine."Line No." + 10000
      ELSE
        NextLineNo := 10000;

      IF ServiceInvHeader."No." <> TempServiceLine."Document No." THEN
        ServiceInvHeader.GET(TempServiceLine."Document Type",TempServiceLine."Document No.");

      IF ServiceLine."Shipment No." <> "Document No." THEN BEGIN
        ServiceLine.INIT;
        ServiceLine."Line No." := NextLineNo;
        ServiceLine."Document Type" := TempServiceLine."Document Type";
        ServiceLine."Document No." := TempServiceLine."Document No.";
        ServiceLine.Description := STRSUBSTNO(Text000,"Document No.");
        ServiceLine."Shipment No." := "Document No.";
        ServiceLine.INSERT;
        NextLineNo := NextLineNo + 10000;
      END;

      TransferOldExtLines.ClearLineNumbers;

      REPEAT
        ExtTextLine := (TransferOldExtLines.GetNewLineNumber("Attached to Line No.") <> 0);

        IF ServiceOrderLine.GET(ServiceOrderLine."Document Type"::Order,"Order No.","Order Line No.") THEN BEGIN
          IF (ServiceOrderHeader."Document Type" <> ServiceOrderLine."Document Type"::Order) OR
             (ServiceOrderHeader."No." <> ServiceOrderLine."Document No.")
          THEN
            ServiceOrderHeader.GET(ServiceOrderLine."Document Type"::Order,"Order No.");

          IF ServiceInvHeader."Prices Including VAT" <> ServiceOrderHeader."Prices Including VAT" THEN
            InitCurrency("Currency Code");

          IF ServiceInvHeader."Prices Including VAT" THEN BEGIN
            IF NOT ServiceOrderHeader."Prices Including VAT" THEN
              ServiceOrderLine."Unit Price" :=
                ROUND(
                  ServiceOrderLine."Unit Price" * (1 + ServiceOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END ELSE BEGIN
            IF ServiceOrderHeader."Prices Including VAT" THEN
              ServiceOrderLine."Unit Price" :=
                ROUND(
                  ServiceOrderLine."Unit Price" / (1 + ServiceOrderLine."VAT %" / 100),
                  Currency."Unit-Amount Rounding Precision");
          END;
        END ELSE BEGIN
          ServiceOrderHeader.INIT;
          IF ExtTextLine THEN BEGIN
            ServiceOrderLine.INIT;
            ServiceOrderLine."Line No." := "Order Line No.";
            ServiceOrderLine.Description := Description;
            ServiceOrderLine."Description 2" := "Description 2";
          END ELSE
            ERROR(Text001);
        END;

        ServiceLine := ServiceOrderLine;
        ServiceLine."Line No." := NextLineNo;
        ServiceLine."Document Type" := TempServiceLine."Document Type";
        ServiceLine."Document No." := TempServiceLine."Document No.";
        ServiceLine."Variant Code" := "Variant Code";
        ServiceLine."Location Code" := "Location Code";

        ServiceLine.Quantity := 0;
        ServiceLine."Quantity (Base)" := 0;
        ServiceLine."Outstanding Qty. (Base)" := 0;
        ServiceLine."Outstanding Quantity" := 0;
        ServiceLine."Quantity Shipped" := 0;
        ServiceLine."Qty. Shipped (Base)" := 0;
        ServiceLine."Quantity Invoiced" := 0;
        ServiceLine."Qty. Invoiced (Base)" := 0;
        ServiceLine."Quantity Consumed" := 0;
        ServiceLine."Qty. Consumed (Base)" := 0;
        ServiceLine."Qty. to Consume" := 0;

        ServiceLine."Shipment No." := "Document No.";
        ServiceLine."Shipment Line No." := "Line No.";

        IF NOT ExtTextLine THEN BEGIN
          ServiceLine.VALIDATE(Quantity,Quantity - "Quantity Invoiced" - "Quantity Consumed");
          ServiceLine.VALIDATE("Unit Price",ServiceOrderLine."Unit Price");
          ServiceLine."Allow Line Disc." := ServiceOrderLine."Allow Line Disc.";
          ServiceLine."Allow Invoice Disc." := ServiceOrderLine."Allow Invoice Disc.";
          ServiceLine.VALIDATE("Line Discount %",ServiceOrderLine."Line Discount %");
        END;
        ServiceLine."Attached to Line No." :=
          TransferOldExtLines.TransferExtendedText(
            ServiceOrderLine."Line No.",
            NextLineNo,
            ServiceOrderLine."Attached to Line No.");
        ServiceLine."Shortcut Dimension 1 Code" := ServiceOrderLine."Shortcut Dimension 1 Code";
        ServiceLine."Shortcut Dimension 2 Code" := ServiceOrderLine."Shortcut Dimension 2 Code";
        ServiceLine."Dimension Set ID" := ServiceOrderLine."Dimension Set ID";
        ServiceLine.INSERT;

        IF (ServiceLine."Contract No." <> '') AND (ServiceLine.Type <> ServiceLine.Type::" ") THEN
          CASE ServiceLine."Document Type" OF
            ServiceLine."Document Type"::Invoice:
              ServDocReg.InsertServSalesDocument(
                ServDocReg."Source Document Type"::Contract,ServiceLine."Contract No.",
                ServDocReg."Destination Document Type"::Invoice,ServiceLine."Document No.") ;
            ServiceLine."Document Type"::"Credit Memo":
              ServDocReg.InsertServSalesDocument(
                ServDocReg."Source Document Type"::Contract,ServiceLine."Contract No.",
                ServDocReg."Destination Document Type"::"Credit Memo",ServiceLine."Document No.")
          END;

        ItemTrackingMgt.CopyHandledItemTrkgToServLine(ServiceOrderLine,ServiceLine);

        NextLineNo := NextLineNo + 10000;
        IF "Attached to Line No." = 0 THEN
          SETRANGE("Attached to Line No.","Line No.");
      UNTIL (NEXT = 0) OR ("Attached to Line No." = 0);

      IF ServiceOrderHeader.GET(ServiceOrderHeader."Document Type"::Order,"Order No.") THEN
        ServiceOrderHeader.MODIFY;
    END;

    LOCAL PROCEDURE GetServInvLines@4(VAR TempServInvLine@1000 : TEMPORARY Record 5993);
    VAR
      ServInvLine@1003 : Record 5993;
      ItemLedgEntry@1002 : Record 32;
      ValueEntry@1001 : Record 5802;
    BEGIN
      TempServInvLine.RESET;
      TempServInvLine.DELETEALL;

      IF Type <> Type::Item THEN
        EXIT;

      FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
      ItemLedgEntry.SETFILTER("Invoiced Quantity",'<>0');
      IF ItemLedgEntry.FINDFIRST THEN BEGIN
        ValueEntry.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
        ValueEntry.SETRANGE("Entry Type",ValueEntry."Entry Type"::"Direct Cost");
        ValueEntry.SETFILTER("Invoiced Quantity",'<>0');
        REPEAT
          ValueEntry.SETRANGE("Item Ledger Entry No.",ItemLedgEntry."Entry No.");
          IF ValueEntry.FIND('-') THEN
            REPEAT
              IF ValueEntry."Document Type" = ValueEntry."Document Type"::"Service Invoice" THEN
                IF ServInvLine.GET(ValueEntry."Document No.",ValueEntry."Document Line No.") THEN BEGIN
                  TempServInvLine.INIT;
                  TempServInvLine := ServInvLine;
                  IF TempServInvLine.INSERT THEN;
                END;
            UNTIL ValueEntry.NEXT = 0;
        UNTIL ItemLedgEntry.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE CalcShippedSaleNotReturned@3(VAR ShippedQtyNotReturned@1003 : Decimal;VAR RevUnitCostLCY@1005 : Decimal;ExactCostReverse@1006 : Boolean);
    VAR
      ItemLedgEntry@1000 : Record 32;
      TotalCostLCY@1007 : Decimal;
      TotalQtyBase@1002 : Decimal;
    BEGIN
      ShippedQtyNotReturned := 0;
      IF (Type <> Type::Item) OR (Quantity <= 0) THEN BEGIN
        RevUnitCostLCY := "Unit Cost (LCY)";
        EXIT;
      END;

      RevUnitCostLCY := 0;
      FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
      IF ItemLedgEntry.FIND('-') THEN
        REPEAT
          ShippedQtyNotReturned := ShippedQtyNotReturned - ItemLedgEntry."Shipped Qty. Not Returned";
          IF ExactCostReverse THEN BEGIN
            ItemLedgEntry.CALCFIELDS("Cost Amount (Expected)","Cost Amount (Actual)");
            TotalCostLCY :=
              TotalCostLCY + ItemLedgEntry."Cost Amount (Expected)" + ItemLedgEntry."Cost Amount (Actual)";
            TotalQtyBase := TotalQtyBase + ItemLedgEntry.Quantity;
          END;
        UNTIL ItemLedgEntry.NEXT = 0;

      IF ExactCostReverse AND (ShippedQtyNotReturned <> 0) AND (TotalQtyBase <> 0) THEN
        RevUnitCostLCY := ABS(TotalCostLCY / TotalQtyBase) * "Qty. per Unit of Measure"
      ELSE
        RevUnitCostLCY := "Unit Cost (LCY)";

      ShippedQtyNotReturned := CalcQty(ShippedQtyNotReturned);
    END;

    LOCAL PROCEDURE CalcQty@9(QtyBase@1000 : Decimal) : Decimal;
    BEGIN
      IF "Qty. per Unit of Measure" = 0 THEN
        EXIT(QtyBase);
      EXIT(ROUND(QtyBase / "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE FilterPstdDocLnItemLedgEntries@5(VAR ItemLedgEntry@1000 : Record 32);
    BEGIN
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Document No.","Document Type","Document Line No.");
      ItemLedgEntry.SETRANGE("Document No.","Document No.");
      ItemLedgEntry.SETRANGE("Document Type",ItemLedgEntry."Document Type"::"Service Shipment");
      ItemLedgEntry.SETRANGE("Document Line No.","Line No.");
    END;

    LOCAL PROCEDURE ShowItemLedgEntries@7();
    VAR
      ItemLedgEntry@1000 : Record 32;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        FilterPstdDocLnItemLedgEntries(ItemLedgEntry);
        PAGE.RUNMODAL(0,ItemLedgEntry);
      END;
    END;

    PROCEDURE ShowItemServInvLines@8();
    VAR
      TempServInvLine@1001 : TEMPORARY Record 5993;
    BEGIN
      IF Type = Type::Item THEN BEGIN
        GetServInvLines(TempServInvLine);
        PAGE.RUNMODAL(PAGE::"Posted Service Invoice Lines",TempServInvLine);
      END;
    END;

    LOCAL PROCEDURE InitCurrency@6(CurrencyCode@1001 : Code[10]);
    BEGIN
      IF (Currency.Code = CurrencyCode) AND CurrencyRead THEN
        EXIT;

      IF CurrencyCode <> '' THEN
        Currency.GET(CurrencyCode)
      ELSE
        Currency.InitRoundingPrecision;
      CurrencyRead := TRUE;
    END;

    LOCAL PROCEDURE GetCaptionClass@34(FieldNumber@1000 : Integer) : Text[80];
    VAR
      ServShipmentHeader@1001 : Record 5990;
    BEGIN
      IF NOT ServShipmentHeader.GET("Document No.") THEN
        ServShipmentHeader.INIT;
      IF ServShipmentHeader."Prices Including VAT" THEN
        EXIT('2,1,' + GetFieldCaption(FieldNumber));
      EXIT('2,0,' + GetFieldCaption(FieldNumber));
    END;

    LOCAL PROCEDURE GetFieldCaption@31(FieldNumber@1000 : Integer) : Text[100];
    VAR
      Field@1001 : Record 2000000041;
    BEGIN
      Field.GET(DATABASE::"Service Shipment Line",FieldNumber);
      EXIT(Field."Field Caption");
    END;

    PROCEDURE Navigate@10();
    VAR
      NavigateForm@1000 : Page 344;
    BEGIN
      NavigateForm.SetDoc("Posting Date","Document No.");
      NavigateForm.RUN;
    END;

    BEGIN
    END.
  }
}


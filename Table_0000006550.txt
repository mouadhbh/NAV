OBJECT Table 6550 Whse. Item Tracking Line
{
  OBJECT-PROPERTIES
  {
    Date=23/10/15;
    Time=12:00:00;
    Version List=NAVW19.00.00.43402;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               TESTFIELD("Quantity Handled (Base)",0);
             END;

    CaptionML=[ENU=Whse. Item Tracking Line;
               FRA=Ligne tra‡abilit‚ entrep.];
  }
  FIELDS
  {
    { 1   ;   ;Entry No.           ;Integer       ;CaptionML=[ENU=Entry No.;
                                                              FRA=Nø s‚quence] }
    { 2   ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   CaptionML=[ENU=Item No.;
                                                              FRA=Nø article] }
    { 3   ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   CaptionML=[ENU=Location Code;
                                                              FRA=Code magasin] }
    { 4   ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                IF "Quantity (Base)" < 0 THEN
                                                                  FIELDERROR("Quantity (Base)",Text004);

                                                                IF "Quantity (Base)" < "Quantity Handled (Base)" THEN
                                                                  FIELDERROR("Quantity (Base)",STRSUBSTNO(Text002,FIELDCAPTION("Quantity Handled (Base)")));

                                                                CheckSerialNoQty;

                                                                InitQtyToHandle;
                                                              END;

                                                   CaptionML=[ENU=Quantity (Base);
                                                              FRA=Quantit‚ (base)];
                                                   DecimalPlaces=0:5 }
    { 7   ;   ;Description         ;Text50        ;CaptionML=[ENU=Description;
                                                              FRA=D‚signation] }
    { 10  ;   ;Source Type         ;Integer       ;CaptionML=[ENU=Source Type;
                                                              FRA=Type origine] }
    { 11  ;   ;Source Subtype      ;Option        ;CaptionML=[ENU=Source Subtype;
                                                              FRA=Sous-type origine];
                                                   OptionCaptionML=[ENU=0,1,2,3,4,5,6,7,8,9,10;
                                                                    FRA=0,1,2,3,4,5,6,7,8,9,10];
                                                   OptionString=0,1,2,3,4,5,6,7,8,9,10 }
    { 12  ;   ;Source ID           ;Code20        ;CaptionML=[ENU=Source ID;
                                                              FRA=ID origine] }
    { 13  ;   ;Source Batch Name   ;Code10        ;CaptionML=[ENU=Source Batch Name;
                                                              FRA=Nom feuille origine] }
    { 14  ;   ;Source Prod. Order Line;Integer    ;CaptionML=[ENU=Source Prod. Order Line;
                                                              FRA=Ligne O.F. origine] }
    { 15  ;   ;Source Ref. No.     ;Integer       ;CaptionML=[ENU=Source Ref. No.;
                                                              FRA=Nø r‚f. origine] }
    { 24  ;   ;Serial No.          ;Code20        ;OnValidate=BEGIN
                                                                IF "Serial No." <> xRec."Serial No." THEN BEGIN
                                                                  TESTFIELD("Quantity Handled (Base)",0);
                                                                  IF IsReclass("Source Type","Source Batch Name") THEN
                                                                    "New Serial No." := "Serial No.";
                                                                  CheckSerialNoQty;
                                                                  InitExpirationDate;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Serial No.;
                                                              FRA=Nø de s‚rie] }
    { 29  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=[ENU=Qty. per Unit of Measure;
                                                              FRA=Quantit‚ par unit‚];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 40  ;   ;Warranty Date       ;Date          ;CaptionML=[ENU=Warranty Date;
                                                              FRA=Date garantie] }
    { 41  ;   ;Expiration Date     ;Date          ;OnValidate=BEGIN
                                                                "New Expiration Date" := "Expiration Date";
                                                              END;

                                                   CaptionML=[ENU=Expiration Date;
                                                              FRA=Date d'expiration] }
    { 50  ;   ;Qty. to Handle (Base);Decimal      ;OnValidate=BEGIN
                                                                IF "Qty. to Handle (Base)" < 0 THEN
                                                                  FIELDERROR("Qty. to Handle (Base)",Text004);

                                                                IF "Qty. to Handle (Base)" > ("Quantity (Base)" - "Quantity Handled (Base)")
                                                                THEN
                                                                  ERROR(
                                                                    Text001,
                                                                    "Quantity (Base)" - "Quantity Handled (Base)");

                                                                "Qty. to Handle" := CalcQty("Qty. to Handle (Base)");
                                                              END;

                                                   CaptionML=[ENU=Qty. to Handle (Base);
                                                              FRA=Quantit‚ … traiter (base)];
                                                   DecimalPlaces=0:5 }
    { 51  ;   ;Qty. to Invoice (Base);Decimal     ;CaptionML=[ENU=Qty. to Invoice (Base);
                                                              FRA=Qt‚ … facturer (base)];
                                                   DecimalPlaces=0:5 }
    { 52  ;   ;Quantity Handled (Base);Decimal    ;CaptionML=[ENU=Quantity Handled (Base);
                                                              FRA=Quantit‚ trait‚e (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 53  ;   ;Quantity Invoiced (Base);Decimal   ;CaptionML=[ENU=Quantity Invoiced (Base);
                                                              FRA=Quantit‚ factur‚e (base)];
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 60  ;   ;Qty. to Handle      ;Decimal       ;CaptionML=[ENU=Qty. to Handle;
                                                              FRA=Quantit‚ … traiter];
                                                   DecimalPlaces=0:5 }
    { 70  ;   ;Buffer Status       ;Option        ;CaptionML=[ENU=Buffer Status;
                                                              FRA=Statut tampon];
                                                   OptionCaptionML=[ENU=" ,MODIFY";
                                                                    FRA=" ,MODIFIER"];
                                                   OptionString=[ ,MODIFY];
                                                   Editable=No }
    { 71  ;   ;Buffer Status2      ;Option        ;CaptionML=[ENU=Buffer Status2;
                                                              FRA=Statut2 tampon];
                                                   OptionCaptionML=[ENU=,ExpDate blocked;
                                                                    FRA=,Date exp. bloqu‚e];
                                                   OptionString=,ExpDate blocked;
                                                   Editable=No }
    { 80  ;   ;New Serial No.      ;Code20        ;CaptionML=[ENU=New Serial No.;
                                                              FRA=Nouveau nø de s‚rie] }
    { 81  ;   ;New Lot No.         ;Code20        ;CaptionML=[ENU=New Lot No.;
                                                              FRA=Nouveau nø lot] }
    { 90  ;   ;Source Type Filter  ;Option        ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Source Type Filter;
                                                              FRA=Filtre type origine];
                                                   OptionCaptionML=[ENU=" ,Receipt,Shipment,Internal Put-away,Internal Pick,Production,Movement Worksheet,Assembly";
                                                                    FRA=" ,R‚ception,Exp‚dition,Rangement interne,Pr‚lŠvement interne,Production,Feuille mouvement,Assemblage"];
                                                   OptionString=[ ,Receipt,Shipment,Internal Put-away,Internal Pick,Production,Movement Worksheet,Assembly] }
    { 91  ;   ;Qty. Registered (Base);Decimal     ;CaptionML=[ENU=Qty. Registered (Base);
                                                              FRA=Qt‚ valid‚e (base)] }
    { 92  ;   ;Put-away Qty. (Base);Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE (Activity Type=FILTER(Put-away),
                                                                                                                              Whse. Document Type=FIELD(Source Type Filter),
                                                                                                                              Whse. Document No.=FIELD(Source ID),
                                                                                                                              Whse. Document Line No.=FIELD(Source Ref. No.),
                                                                                                                              Serial No.=FIELD(Serial No.),
                                                                                                                              Lot No.=FIELD(Lot No.),
                                                                                                                              Action Type=FILTER(' '|Take)));
                                                   CaptionML=[ENU=Put-away Qty. (Base);
                                                              FRA=Ranger qt‚ (base)] }
    { 93  ;   ;Pick Qty. (Base)    ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Warehouse Activity Line"."Qty. Outstanding (Base)" WHERE (Activity Type=FILTER(Pick|Movement),
                                                                                                                              Whse. Document Type=FIELD(Source Type Filter),
                                                                                                                              Whse. Document No.=FIELD(Source ID),
                                                                                                                              Whse. Document Line No.=FIELD(Source Ref. No.),
                                                                                                                              Serial No.=FIELD(Serial No.),
                                                                                                                              Lot No.=FIELD(Lot No.),
                                                                                                                              Action Type=FILTER(' '|Place)));
                                                   CaptionML=[ENU=Pick Qty. (Base);
                                                              FRA=Pr‚lever qt‚ (base)] }
    { 94  ;   ;Created by Whse. Activity Line;Boolean;
                                                   CaptionML=[ENU=Created by Whse. Activity Line;
                                                              FRA=Cr‚‚ par ligne activit‚ entrep.] }
    { 5400;   ;Lot No.             ;Code20        ;OnValidate=BEGIN
                                                                IF "Lot No." <> xRec."Lot No." THEN BEGIN
                                                                  TESTFIELD("Quantity Handled (Base)",0);
                                                                  IF IsReclass("Source Type","Source Batch Name") THEN
                                                                    "New Lot No." := "Lot No.";
                                                                  InitExpirationDate;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Lot No.;
                                                              FRA=Nø lot] }
    { 5401;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   CaptionML=[ENU=Variant Code;
                                                              FRA=Code variante] }
    { 6505;   ;New Expiration Date ;Date          ;CaptionML=[ENU=New Expiration Date;
                                                              FRA=Nouvelle date expiration] }
  }
  KEYS
  {
    {    ;Entry No.                               ;Clustered=Yes }
    {    ;Source ID,Source Type,Source Subtype,Source Batch Name,Source Prod. Order Line,Source Ref. No.,Location Code;
                                                   SumIndexFields=Quantity (Base),Qty. to Handle (Base),Qty. to Invoice (Base),Quantity Handled (Base),Quantity Invoiced (Base);
                                                   MaintainSIFTIndex=No }
    {    ;Serial No.,Lot No.                       }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=You cannot handle more than %1 units.;FRA=Vous ne pouvez pas g‚rer plus de %1 unit‚(s).';
      Text002@1000 : TextConst 'ENU=must not be less than %1;FRA=ne doit pas ˆtre inf‚rieur(e) … %1';
      Text003@1002 : TextConst 'ENU=%1 must be 0 or 1 when %2 is stated.;FRA=La %1 doit ˆtre ‚gale … 0 ou 1 lorsque la valeur %2 est indiqu‚e.';
      Text004@1004 : TextConst 'ENU=must not be negative;FRA=ne doit pas ˆtre de signe n‚gatif';

    LOCAL PROCEDURE CheckSerialNoQty@1();
    BEGIN
      IF "Serial No." <> '' THEN
        IF NOT ("Quantity (Base)" IN [0,1]) THEN
          ERROR(Text003,FIELDCAPTION("Quantity (Base)"),FIELDCAPTION("Serial No."));
    END;

    LOCAL PROCEDURE CalcQty@14(BaseQty@1000 : Decimal) : Decimal;
    BEGIN
      IF "Qty. per Unit of Measure" = 0 THEN
        "Qty. per Unit of Measure" := 1;
      EXIT(ROUND(BaseQty / "Qty. per Unit of Measure",0.00001));
    END;

    PROCEDURE InitQtyToHandle@15();
    BEGIN
      "Qty. to Handle (Base)" := "Quantity (Base)" - "Quantity Handled (Base)";
      "Qty. to Handle" := CalcQty("Qty. to Handle (Base)");
    END;

    PROCEDURE InitExpirationDate@2();
    VAR
      Location@1003 : Record 14;
      ItemTrackingMgt@1001 : Codeunit 6500;
      ExpDate@1000 : Date;
      WarDate@1004 : Date;
    BEGIN
      IF ("Serial No." = xRec."Serial No.") AND ("Lot No." = xRec."Lot No.") THEN
        EXIT;

      "Expiration Date" := 0D;
      "Buffer Status2" := 0;

      Location.INIT;
      IF "Location Code" <> '' THEN
        Location.GET("Location Code");

      IF ItemTrackingMgt.GetWhseExpirationDate("Item No.","Variant Code",Location,"Lot No.","Serial No.",ExpDate) THEN BEGIN
        "Expiration Date" := ExpDate;
        "Buffer Status2" := "Buffer Status2"::"ExpDate blocked";
      END;

      IF IsReclass("Source Type","Source Batch Name") THEN BEGIN
        "New Expiration Date" := "Expiration Date";
        IF ItemTrackingMgt.GetWhseWarrantyDate("Item No.","Variant Code",Location,"Lot No.","Serial No.",WarDate) THEN
          "Warranty Date" := WarDate;
      END;
    END;

    PROCEDURE IsReclass@4(SourceType@1001 : Integer;SourceBatchName@1002 : Code[10]) : Boolean;
    VAR
      WhseJnlLine@1000 : Record 7311;
    BEGIN
      IF SourceType = DATABASE::"Warehouse Journal Line" THEN
        EXIT(WhseJnlLine.IsReclass(SourceBatchName));

      EXIT(FALSE);
    END;

    PROCEDURE LookUpTrackingSummary@50(VAR WhseItemTrackingLine@1000 : Record 6550;TrackingType@1001 : 'SerialNo,LotNo';MaxQuantity@1002 : Decimal;SignFactor@1003 : Integer;SearchForSupply@1004 : Boolean);
    VAR
      TempTrackingSpecification@1005 : TEMPORARY Record 336;
      WhseJnlLine@1006 : Record 7311;
      WhseWorksheetLine@1007 : Record 7326;
      WhseInternalPutawayLine@1010 : Record 7332;
      InternalMovementLine@1011 : Record 7347;
      ItemTrackingDataCollection@1008 : Codeunit 6501;
      BinCode@1009 : Code[20];
    BEGIN
      WITH WhseItemTrackingLine DO BEGIN
        CASE "Source Type" OF
          DATABASE::"Warehouse Journal Line":
            BEGIN
              WhseJnlLine.GET("Source Batch Name","Source ID","Location Code","Source Ref. No.");
              BinCode := WhseJnlLine."Bin Code";
            END;
          DATABASE::"Whse. Worksheet Line":
            BEGIN
              WhseWorksheetLine.GET("Source Batch Name","Source ID","Location Code","Source Ref. No.");
              BinCode := WhseWorksheetLine."From Bin Code";
            END;
          DATABASE::"Whse. Internal Put-away Line":
            BEGIN
              WhseInternalPutawayLine.GET("Source ID","Source Ref. No.");
              BinCode := WhseInternalPutawayLine."From Bin Code";
            END;
          DATABASE::"Internal Movement Line":
            BEGIN
              InternalMovementLine.GET("Source ID","Source Ref. No.");
              BinCode := InternalMovementLine."From Bin Code";
            END;
          ELSE
            EXIT;
        END;

        TempTrackingSpecification.INIT;
        TempTrackingSpecification."Source Type" := "Source Type";
        TempTrackingSpecification."Item No." := "Item No.";
        TempTrackingSpecification."Location Code" := "Location Code";
        TempTrackingSpecification.Description := Description;
        TempTrackingSpecification."Variant Code" := "Variant Code";
        TempTrackingSpecification."Source Subtype" := "Source Subtype";
        TempTrackingSpecification."Source ID" := "Source ID";
        TempTrackingSpecification."Source Batch Name" := "Source Batch Name";
        TempTrackingSpecification."Source Prod. Order Line" := "Source Prod. Order Line";
        TempTrackingSpecification."Source Ref. No." := "Source Ref. No.";
        TempTrackingSpecification."Quantity (Base)" := "Quantity (Base)";
        TempTrackingSpecification."Qty. to Handle" := "Qty. to Handle";
        TempTrackingSpecification."Qty. to Handle (Base)" := "Qty. to Handle (Base)";
        TempTrackingSpecification."Qty. to Invoice" := 0;
        TempTrackingSpecification."Qty. to Invoice (Base)" := 0;
        TempTrackingSpecification."Quantity Handled (Base)" := 0;
        TempTrackingSpecification."Quantity Invoiced (Base)" := 0;
        TempTrackingSpecification."Qty. per Unit of Measure" := "Qty. per Unit of Measure";
        TempTrackingSpecification."Bin Code" := BinCode;

        ItemTrackingDataCollection.AssistEditLotSerialNo(
          TempTrackingSpecification,SearchForSupply,SignFactor,TrackingType,MaxQuantity);

        VALIDATE("Quantity (Base)",TempTrackingSpecification."Quantity (Base)");

        CASE TrackingType OF
          TrackingType::SerialNo:
            IF TempTrackingSpecification."Serial No." <> '' THEN
              VALIDATE("Serial No.",TempTrackingSpecification."Serial No.");
          TrackingType::LotNo:
            IF TempTrackingSpecification."Lot No." <> '' THEN
              VALIDATE("Lot No.",TempTrackingSpecification."Lot No.");
        END;
      END;
    END;

    PROCEDURE TrackingExists@3() : Boolean;
    BEGIN
      EXIT(("Lot No." <> '') OR ("Serial No." <> ''));
    END;

    BEGIN
    END.
  }
}


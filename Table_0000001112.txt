OBJECT Table 1112 Cost Center
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               SETRECFILTER;
               ConfirmDeleteIfEntriesExist(Rec,TRUE);
               SETRANGE(Code);
             END;

    CaptionML=[ENU=Cost Center;
               FRA=Centre de co–ts];
    LookupPageID=Page1122;
  }
  FIELDS
  {
    { 1   ;   ;Code                ;Code20        ;OnLookup=VAR
                                                              CostAccMgt@1000 : Codeunit 1100;
                                                            BEGIN
                                                              CostAccMgt.LookupCostCenterFromDimValue(Code);
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Code;
                                                              FRA=Code];
                                                   NotBlank=Yes }
    { 2   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              FRA=Nom] }
    { 3   ;   ;Cost Subtype        ;Option        ;CaptionML=[ENU=Cost Subtype;
                                                              FRA=Sous-type co–t];
                                                   OptionCaptionML=[ENU=" ,Service Cost Center,Aux. Cost Center,Main Cost Center";
                                                                    FRA=" ,Centre de co–ts de service,Centre de co–ts aux.,Centre de co–ts principal"];
                                                   OptionString=[ ,Service Cost Center,Aux. Cost Center,Main Cost Center] }
    { 4   ;   ;Cost Type Filter    ;Code20        ;FieldClass=FlowFilter;
                                                   TableRelation="Cost Type";
                                                   CaptionML=[ENU=Cost Type Filter;
                                                              FRA=Filtre type co–t] }
    { 5   ;   ;Date Filter         ;Date          ;FieldClass=FlowFilter;
                                                   CaptionML=[ENU=Date Filter;
                                                              FRA=Filtre date] }
    { 6   ;   ;Net Change          ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cost Entry".Amount WHERE (Cost Center Code=FIELD(Code),
                                                                                              Cost Center Code=FIELD(FILTER(Totaling)),
                                                                                              Cost Type No.=FIELD(Cost Type Filter),
                                                                                              Posting Date=FIELD(Date Filter)));
                                                   CaptionML=[ENU=Net Change;
                                                              FRA=Solde p‚riode];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 7   ;   ;Balance at Date     ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cost Entry".Amount WHERE (Cost Center Code=FIELD(Code),
                                                                                              Cost Center Code=FIELD(FILTER(Totaling)),
                                                                                              Cost Type No.=FIELD(Cost Type Filter),
                                                                                              Posting Date=FIELD(UPPERLIMIT(Date Filter))));
                                                   CaptionML=[ENU=Balance at Date;
                                                              FRA=Solde au];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 8   ;   ;Balance to Allocate ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Cost Entry".Amount WHERE (Cost Center Code=FIELD(Code),
                                                                                              Cost Center Code=FIELD(FILTER(Totaling)),
                                                                                              Cost Type No.=FIELD(Cost Type Filter),
                                                                                              Posting Date=FIELD(Date Filter),
                                                                                              Allocated=CONST(No)));
                                                   CaptionML=[ENU=Balance to Allocate;
                                                              FRA=Solde … affecter];
                                                   BlankZero=Yes;
                                                   Editable=No }
    { 9   ;   ;Responsible Person  ;Code50        ;TableRelation=User."User Name";
                                                   OnValidate=VAR
                                                                UserMgt@1000 : Codeunit 418;
                                                              BEGIN
                                                                UserMgt.ValidateUserID("Responsible Person");
                                                              END;

                                                   OnLookup=VAR
                                                              UserMgt@1000 : Codeunit 418;
                                                            BEGIN
                                                              UserMgt.LookupUserID("Responsible Person");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Responsible Person;
                                                              FRA=Personne responsable] }
    { 10  ;   ;Sorting Order       ;Code10        ;CaptionML=[ENU=Sorting Order;
                                                              FRA=Ordre de tri] }
    { 11  ;   ;Comment             ;Text50        ;CaptionML=[ENU=Comment;
                                                              FRA=Commentaire] }
    { 12  ;   ;Line Type           ;Option        ;OnValidate=BEGIN
                                                                // Change to other type than cost type. Entries exist?
                                                                IF (("Line Type" <> "Line Type"::"Cost Center") AND
                                                                    (xRec."Line Type" = xRec."Line Type"::"Cost Center")) OR
                                                                   (("Line Type" <> "Line Type"::"Begin-Total") AND
                                                                    (xRec."Line Type" = xRec."Line Type"::"Begin-Total"))
                                                                THEN
                                                                  ConfirmModifyIfEntriesExist(Rec);

                                                                IF "Line Type" <> "Line Type"::"Cost Center" THEN BEGIN
                                                                  Blocked := TRUE;
                                                                  "Cost Subtype" := 0;
                                                                END ELSE
                                                                  Totaling := '';
                                                              END;

                                                   CaptionML=[ENU=Line Type;
                                                              FRA=Type ligne];
                                                   OptionCaptionML=[ENU=Cost Center,Heading,Total,Begin-Total,End-Total;
                                                                    FRA=Centre de co–ts,En-tˆte,Total,D‚but total,Fin total];
                                                   OptionString=Cost Center,Heading,Total,Begin-Total,End-Total }
    { 13  ;   ;Blocked             ;Boolean       ;CaptionML=[ENU=Blocked;
                                                              FRA=Bloqu‚] }
    { 14  ;   ;New Page            ;Boolean       ;CaptionML=[ENU=New Page;
                                                              FRA=Nouvelle page] }
    { 15  ;   ;Blank Line          ;Boolean       ;CaptionML=[ENU=Blank Line;
                                                              FRA=Ligne blanche];
                                                   MinValue=No }
    { 16  ;   ;Indentation         ;Integer       ;CaptionML=[ENU=Indentation;
                                                              FRA=Indentation];
                                                   MinValue=0;
                                                   Editable=No }
    { 17  ;   ;Totaling            ;Text250       ;OnValidate=BEGIN
                                                                IF NOT ("Line Type" IN ["Line Type"::Total,"Line Type"::"End-Total"]) THEN
                                                                  FIELDERROR("Line Type");

                                                                CALCFIELDS("Net Change");
                                                              END;

                                                   OnLookup=VAR
                                                              SelectionFilter@1000 : Text[1024];
                                                            BEGIN
                                                              IF LookupCostCenterFilter(SelectionFilter) THEN
                                                                VALIDATE(Totaling,COPYSTR(SelectionFilter,1,MAXSTRLEN(Totaling)));
                                                            END;

                                                   CaptionML=[ENU=Totaling;
                                                              FRA=Totalisation] }
  }
  KEYS
  {
    {    ;Code                                    ;Clustered=Yes }
    {    ;Cost Subtype                             }
    {    ;Sorting Order                            }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Code,Name,Field720                       }
  }
  CODE
  {
    VAR
      Text001@1001 : TextConst 'ENU=There are general ledger entries, cost entries, or cost budget entries that are posted to the selected cost center. Are you sure that you want to delete the cost center?;FRA=Des ‚critures comptables, des ‚critures de co–ts ou des ‚critures budget des co–ts sont valid‚es dans le centre de co–ts s‚lectionn‚. Voulez-vous vraiment modifier le centre de co–tsÿ?';
      Text002@1002 : TextConst 'ENU=There are general ledger entries, cost entries, or cost budget entries that are posted to the selected cost center. Are you sure that you want to modify the cost center?;FRA=Des ‚critures comptables, des ‚critures de co–ts ou des ‚critures budget des co–ts sont valid‚es dans le centre de co–ts s‚lectionn‚. Voulez-vous vraiment modifier le centre de co–tsÿ?';

    LOCAL PROCEDURE EntriesExist@1(VAR CostCenter@1007 : Record 1112) EntriesFound : Boolean;
    VAR
      CostAccSetup@1000 : Record 1108;
      GLEntry@1001 : Record 17;
      CostEntry@1002 : Record 1104;
      CostBudgetEntry@1003 : Record 1109;
      DimensionMgt@1004 : Codeunit 408;
      DimFilterChunk@1005 : Text[1024];
    BEGIN
      CostAccSetup.GET;
      IF CostCenter.FINDSET THEN
        REPEAT
          DimensionMgt.GetDimSetIDsForFilter(CostAccSetup."Cost Center Dimension",CostCenter.Code);
          DimFilterChunk := DimensionMgt.GetNextDimSetFilterChunk(MAXSTRLEN(DimFilterChunk));
          WHILE DimFilterChunk <> '' DO BEGIN
            GLEntry.SETFILTER("Dimension Set ID",DimFilterChunk);
            IF GLEntry.FINDFIRST THEN BEGIN
              DimFilterChunk := '';
              EntriesFound := TRUE
            END ELSE
              DimFilterChunk := DimensionMgt.GetNextDimSetFilterChunk(MAXSTRLEN(DimFilterChunk));
          END;

          IF NOT EntriesFound THEN BEGIN
            CostBudgetEntry.SETCURRENTKEY("Budget Name","Cost Center Code");
            CostBudgetEntry.SETRANGE("Cost Center Code",CostCenter.Code);
            EntriesFound := NOT CostBudgetEntry.ISEMPTY;
          END;

          IF NOT EntriesFound THEN BEGIN
            CostEntry.SETCURRENTKEY("Cost Center Code");
            CostEntry.SETRANGE("Cost Center Code",CostCenter.Code);
            EntriesFound := NOT CostEntry.ISEMPTY;
          END;
        UNTIL (CostCenter.NEXT = 0) OR EntriesFound;
    END;

    PROCEDURE ConfirmDeleteIfEntriesExist@3(VAR CostCenter@1000 : Record 1112;CalledFromOnInsert@1001 : Boolean);
    BEGIN
      IF EntriesExist(CostCenter) THEN
        IF NOT CONFIRM(Text001,TRUE) THEN
          ERROR('');
      IF NOT CalledFromOnInsert THEN
        CostCenter.DELETEALL;
    END;

    LOCAL PROCEDURE ConfirmModifyIfEntriesExist@4(VAR CostCenter@1000 : Record 1112);
    VAR
      CostCenter2@1001 : Record 1112;
    BEGIN
      CostCenter2 := CostCenter;
      CostCenter2.SETRECFILTER;
      IF EntriesExist(CostCenter2) THEN
        IF NOT CONFIRM(Text002,TRUE) THEN
          ERROR('');
    END;

    PROCEDURE LookupCostCenterFilter@2(VAR Text@1000 : Text) : Boolean;
    VAR
      ChartOfCostCenters@1002 : Page 1122;
    BEGIN
      ChartOfCostCenters.LOOKUPMODE(TRUE);
      IF ChartOfCostCenters.RUNMODAL = ACTION::LookupOK THEN BEGIN
        Text := ChartOfCostCenters.GetSelectionFilter;
        EXIT(TRUE);
      END;
      EXIT(FALSE)
    END;

    BEGIN
    END.
  }
}


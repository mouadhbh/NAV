OBJECT Codeunit 5943 Lock-OpenServContract
{
  OBJECT-PROPERTIES
  {
    Date=07/09/12;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1001 : TextConst 'ENU=It is not possible to lock this %1 Service %2 because some lines have zero %3.;FRA=Il n''est pas possible de verrouiller ce %2 service %1 car les lignes indiquent un %3 ‚gal … z‚ro.';
      Text001@1000 : TextConst 'ENU=It is not possible to open a %1 service contract;FRA=Il n''est pas possible d''ouvrir un contrat de service %1';
      Text002@1002 : TextConst 'ENU=New lines have been added to this contract.\Would you like to continue?;FRA=De nouvelles lignes ont ‚t‚ ajout‚es … ce contrat.\Souhaitez-vous continuer ?';
      SignServContractDoc@1003 : Codeunit 5944;
      Text003@1004 : TextConst 'ENU=You cannot lock service contract with negative annual amount.;FRA=Vous ne pouvez pas verrouiller un service contrat avec un montant annuel n‚gatif.';
      Text004@1005 : TextConst 'ENU=You cannot lock service contract with zero annual amount when invoice period is different from None.;FRA=Vous ne pouvez pas verrouiller un service contrat avec un montant annuel nul lorsque l''option du champ P‚riode de facturation n''indique pas Aucun.';

    PROCEDURE LockServContract@1(FromServContractHeader@1000 : Record 5965);
    VAR
      ServContractHeader@1002 : Record 5965;
      ServContractLine@1001 : Record 5964;
    BEGIN
      ServContractHeader := FromServContractHeader;
      WITH ServContractHeader DO BEGIN
        IF "Change Status" = "Change Status"::Locked THEN
          EXIT;
        CALCFIELDS("Calcd. Annual Amount");
        TESTFIELD("Annual Amount","Calcd. Annual Amount");
        IF "Annual Amount" < 0 THEN
          ERROR(Text003);
        IF "Invoice Period" <> "Invoice Period"::None THEN
          IF "Annual Amount" = 0 THEN
            ERROR(Text004);

        LOCKTABLE;
        IF ("Contract Type" = "Contract Type"::Contract) AND
           (Status = Status::Signed)
        THEN BEGIN
          ServContractLine.RESET;
          ServContractLine.SETRANGE("Contract Type","Contract Type");
          ServContractLine.SETRANGE("Contract No.","Contract No.");
          ServContractLine.SETRANGE("Line Amount",0);
          IF ServContractLine.FINDFIRST THEN
            ERROR(Text000,Status,"Contract Type",ServContractLine.FIELDCAPTION("Line Amount"));
          ServContractLine.RESET;
          ServContractLine.SETRANGE("Contract Type","Contract Type");
          ServContractLine.SETRANGE("Contract No.","Contract No.");
          ServContractLine.SETRANGE("New Line",TRUE);
          IF ServContractLine.FINDFIRST THEN BEGIN
            IF  NOT CONFIRM(Text002) THEN
              EXIT;
            SignServContractDoc.AddendumToContract(ServContractHeader);
          END;
        END;
        GET(FromServContractHeader."Contract Type",FromServContractHeader."Contract No.");
        "Change Status" := "Change Status"::Locked;
        MODIFY;
      END;
    END;

    PROCEDURE OpenServContract@2(ServContractHeader@1000 : Record 5965);
    BEGIN
      WITH ServContractHeader DO BEGIN
        IF "Change Status" = "Change Status"::Open THEN
          EXIT;
        LOCKTABLE;
        IF (Status = Status::Canceled) AND ("Contract Type" = "Contract Type"::Contract)THEN
          ERROR(Text001,Status);
        "Change Status" := "Change Status"::Open;
        MODIFY;
      END;
    END;

    BEGIN
    END.
  }
}


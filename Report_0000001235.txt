OBJECT Report 1235 Get File Structure
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Get File Structure;
               FRA=Extraire structure de fichiers];
    ProcessingOnly=Yes;
    OnPostReport=BEGIN
                   CheckFileType(DataExchDef);

                   CASE FileType OF
                     FileType::Xsd:
                       ;
                     FileType::Xml:
                       SuggestColDefinitionXML.GenerateDataExchColDef(FilePath,DataExchLineDef);
                     FileType::Csv:
                       ;
                     FileType::Json:
                       SuggestColDefinitionJson.GenerateDataExchColDef(FilePath,DataExchLineDef);
                   END;
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
      { 1   ;    ;Container ;
                  ContainerType=ContentArea }

      { 3   ;1   ;Field     ;
                  Name=FileType;
                  CaptionML=[ENU=File Type;
                             FRA=Type de fichier];
                  OptionCaptionML=[ENU=" ,,Xml,,Json";
                                   FRA=" ,,Xml,,Json"];
                  SourceExpr=FileType;
                  OnValidate=BEGIN
                               CheckFileType(DataExchDef);
                             END;
                              }

      { 2   ;1   ;Field     ;
                  Name=FilePath;
                  ExtendedDatatype=URL;
                  CaptionML=[ENU=Path;
                             FRA=Chemin];
                  SourceExpr=FilePath }

      { 4   ;1   ;Field     ;
                  Name=DataExchDefCode;
                  CaptionML=[ENU=Data Exch. Def. Code;
                             FRA=Code d‚f. ‚chge donn‚es];
                  SourceExpr=DataExchLineDef."Data Exch. Def Code";
                  Editable=FALSE }

      { 5   ;1   ;Field     ;
                  Name=Code;
                  CaptionML=[ENU=Line Definition Code;
                             FRA=Code d‚finition ligne];
                  SourceExpr=DataExchLineDef.Code;
                  Editable=FALSE }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      DataExchLineDef@1002 : Record 1227;
      DataExchDef@1005 : Record 1222;
      SuggestColDefinitionXML@1003 : Codeunit 1236;
      SuggestColDefinitionJson@1004 : Codeunit 1238;
      FileType@1000 : ' ,Xsd,Xml,Csv,Json';
      FilePath@1001 : Text;
      FileTypeCannotBeSelectedErr@1006 : TextConst '@@@="%1 is XML, JSON, etc, %2 is simlar to %1, and %3 will be Data Exch. Definition. ";ENU=" You cannot select %1 when File Type is %2 in %3.";FRA=" Vous ne pouvez pas s‚lectionner %1 lorsque le type de fichier est %2 dans %3."';
      FileTypeNotSupportedErr@1007 : TextConst '@@@=%1 is XML, JSON, etc;ENU=" File type %1 is not supported.";FRA=" Le type de fichier %1 n''est pas pris en charge."';

    PROCEDURE Initialize@3(NewDataExchLineDef@1001 : Record 1227);
    BEGIN
      DataExchLineDef := NewDataExchLineDef;
      DataExchDef.GET(DataExchLineDef."Data Exch. Def Code");

      SetFileType(DataExchDef);
    END;

    LOCAL PROCEDURE CheckFileType@5(DataExchDef@1000 : Record 1222);
    BEGIN
      WITH DataExchDef DO BEGIN
        FIND;
        CASE "File Type" OF
          "File Type"::Xml:
            IF NOT (FileType IN [FileType::Xml]) THEN
              ERROR(FileTypeCannotBeSelectedErr,FileType,"File Type",TABLECAPTION);
          "File Type"::Json:
            IF NOT (FileType IN [FileType::Json]) THEN
              ERROR(FileTypeCannotBeSelectedErr,FileType,"File Type",TABLECAPTION);
        END;
      END;
    END;

    LOCAL PROCEDURE SetFileType@6(DataExchDef@1000 : Record 1222);
    BEGIN
      WITH DataExchDef DO BEGIN
        FIND;
        CASE "File Type" OF
          "File Type"::Xml:
            FileType := FileType::Xml;
          "File Type"::Json:
            FileType := FileType::Json;
          ELSE
            ERROR(FileTypeNotSupportedErr,"File Type");
        END;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}


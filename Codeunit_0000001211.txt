OBJECT Codeunit 1211 Payment Export Gen. Jnl Check
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    TableNo=81;
    OnRun=VAR
            GenJnlBatch@1001 : Record 232;
            BankAccount@1000 : Record 270;
          BEGIN
            DeletePaymentFileErrors;
            GenJnlBatch.GET("Journal Template Name","Journal Batch Name");

            GenJnlBatch.OnCheckGenJournalLineExportRestrictions;

            IF NOT GenJnlBatch."Allow Payment Export" THEN
              AddBatchEmptyError(Rec,GenJnlBatch.FIELDCAPTION("Allow Payment Export"),'');

            IF GenJnlBatch."Bal. Account Type" <> GenJnlBatch."Bal. Account Type"::"Bank Account" THEN
              AddBatchEmptyError(Rec,GenJnlBatch.FIELDCAPTION("Bal. Account Type"),GenJnlBatch."Bal. Account Type");

            IF GenJnlBatch."Bal. Account No." = '' THEN
              AddBatchEmptyError(Rec,GenJnlBatch.FIELDCAPTION("Bal. Account No."),GenJnlBatch."Bal. Account No.");

            IF BankAccount.GET(GenJnlBatch."Bal. Account No.") THEN
              IF BankAccount."Payment Export Format" = '' THEN
                InsertPaymentFileError(
                  STRSUBSTNO(FieldBlankErr,BankAccount.FIELDCAPTION("Payment Export Format"),BankAccount.TABLECAPTION));

            IF NOT ("Account Type" IN ["Account Type"::Customer,"Account Type"::Vendor]) THEN
              InsertPaymentFileError(MustBeVendorOrCustomerErr);

            IF (("Account Type" = "Account Type"::Vendor) AND ("Document Type" <> "Document Type"::Payment)) OR
               (("Account Type" = "Account Type"::Customer) AND ("Document Type" <> "Document Type"::Refund))
            THEN
              InsertPaymentFileError(MustBeVendPmtOrCustRefundErr);

            IF "Payment Method Code" = '' THEN
              AddFieldEmptyError(Rec,TABLECAPTION,FIELDCAPTION("Payment Method Code"),'');

            IF ("Recipient Bank Account" <> '') AND ("Creditor No." <> '') THEN
              InsertPaymentFileError(STRSUBSTNO(SimultaneousPaymentDetailsErr,
                  FIELDCAPTION("Recipient Bank Account"),FIELDCAPTION("Creditor No.")));

            IF ("Recipient Bank Account" = '') AND ("Creditor No." = '') THEN
              InsertPaymentFileError(STRSUBSTNO(EmptyPaymentDetailsErr,
                  FIELDCAPTION("Recipient Bank Account"),FIELDCAPTION("Creditor No.")));

            IF "Bal. Account Type" <> "Bal. Account Type"::"Bank Account" THEN
              InsertPaymentFileError(STRSUBSTNO(WrongBalAccountErr,FIELDCAPTION("Bal. Account Type"),
                  TABLECAPTION,"Bal. Account Type"::"Bank Account",GenJnlBatch.TABLECAPTION,GenJnlBatch.Name));

            IF "Bal. Account No." <> GenJnlBatch."Bal. Account No." THEN
              InsertPaymentFileError(STRSUBSTNO(WrongBalAccountErr,FIELDCAPTION("Bal. Account No."),
                  TABLECAPTION,GenJnlBatch."Bal. Account No.",GenJnlBatch.TABLECAPTION,GenJnlBatch.Name));

            IF Amount <= 0 THEN
              InsertPaymentFileError(MustBePositiveErr);
          END;

  }
  CODE
  {
    VAR
      EmptyPaymentDetailsErr@1002 : TextConst '@@@="%1=Field;%2=Field";ENU=%1 or %2 must be used for payments.;FRA=%1 ou %2 doit ˆtre utilis‚ pour les paiements.';
      SimultaneousPaymentDetailsErr@1000 : TextConst '@@@="%1=Field;%2=Field";ENU=%1 and %2 cannot be used simultaneously for payments.;FRA=%1 et %2 ne peuvent pas ˆtre utilis‚s simultan‚ment pour les paiements.';
      WrongBalAccountErr@1001 : TextConst '@@@="%1=Field;%1=Table;%3=Value;%4=Table;%5=Value";ENU=%1 for the %2 is different from %3 on %4: %5.;FRA=%1 pour le %2 est diff‚rent de %3 sur %4: %5.';
      MustBeVendorOrCustomerErr@1013 : TextConst 'ENU=The account must be a vendor or customer account.;FRA=Le compte doit ˆtre un compte fournisseur ou client.';
      MustBeVendPmtOrCustRefundErr@1012 : TextConst 'ENU=Only vendor payments and customer refunds are allowed.;FRA=Seuls les paiements fournisseur et les remboursements client sont autoris‚s.';
      MustBePositiveErr@1011 : TextConst 'ENU=The amount must be positive.;FRA=Le montant doit ˆtre positif.';
      FieldBlankErr@1007 : TextConst '@@@="%1=table name, %2=field name. Example: Customer must have a value in Name.";ENU=%1 must have a value in %2.;FRA=%1 doit avoir une valeur dans %2.';
      FieldKeyBlankErr@1006 : TextConst '@@@="%1=table name, %2=key field value, %3=field name. Example: Customer 10000 must have a value in Name.";ENU=%1 %2 must have a value in %3.;FRA=%1 %2 doit avoir une valeur dans %3.';

    LOCAL PROCEDURE AddFieldEmptyError@1(VAR GenJnlLine@1000 : Record 81;TableCaption@1001 : Text;FieldCaption@1002 : Text;KeyValue@1003 : Text);
    VAR
      ErrorText@1004 : Text;
    BEGIN
      IF KeyValue = '' THEN
        ErrorText := STRSUBSTNO(FieldBlankErr,TableCaption,FieldCaption)
      ELSE
        ErrorText := STRSUBSTNO(FieldKeyBlankErr,TableCaption,KeyValue,FieldCaption);
      GenJnlLine.InsertPaymentFileError(ErrorText);
    END;

    LOCAL PROCEDURE AddBatchEmptyError@19(VAR GenJnlLine@1000 : Record 81;FieldCaption@1003 : Text;KeyValue@1002 : Variant);
    VAR
      GenJnlBatch@1001 : Record 232;
    BEGIN
      AddFieldEmptyError(GenJnlLine,GenJnlBatch.TABLECAPTION,FieldCaption,FORMAT(KeyValue));
    END;

    BEGIN
    END.
  }
}


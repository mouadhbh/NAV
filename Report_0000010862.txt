OBJECT Report 10862 Suggest Vendor Payments FR
{
  OBJECT-PROPERTIES
  {
    Date=23/10/15;
    Time=12:00:00;
    Version List=NAVFR9.00.00.43402;
  }
  PROPERTIES
  {
    Permissions=TableData 25=rm;
    CaptionML=[ENU=Suggest Vendor Payments;
               FRA=Proposer paiements fournisseur];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 3182;    ;DataItem;                    ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(No.);
               OnPreDataItem=BEGIN
                               IF LastDueDateToPayReq = 0D THEN
                                 ERROR(Text000);
                               IF PostingDate = 0D THEN
                                 ERROR(Text001);

                               GenPayLineInserted := FALSE;
                               MessageText := '';

                               IF UsePaymentDisc AND (LastDueDateToPayReq < WORKDATE) THEN
                                 IF NOT
                                    CONFIRM(
                                      Text003 +
                                      Text004,FALSE,
                                      WORKDATE)
                                 THEN
                                   ERROR(Text005);

                               Vend2.COPYFILTERS(Vendor);

                               OriginalAmtAvailable := AmountAvailable;
                               IF UsePriority THEN BEGIN
                                 SETCURRENTKEY(Priority);
                                 SETRANGE(Priority,1,2147483647);
                                 UsePriority := TRUE;
                               END;
                               Window.OPEN(Text006);

                               NextEntryNo := 1;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF StopPayments THEN
                                    CurrReport.BREAK;
                                  Window.UPDATE(1,"No.");
                                  GetVendLedgEntries(TRUE,FALSE);
                                  GetVendLedgEntries(FALSE,FALSE);
                                  CheckAmounts(FALSE);
                                END;

               OnPostDataItem=BEGIN
                                IF UsePriority AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  SETCURRENTKEY(Priority);
                                  SETRANGE(Priority,0);
                                  IF FIND('-') THEN
                                    REPEAT
                                      Window.UPDATE(1,"No.");
                                      GetVendLedgEntries(TRUE,FALSE);
                                      GetVendLedgEntries(FALSE,FALSE);
                                      CheckAmounts(FALSE);
                                    UNTIL (NEXT = 0) OR StopPayments;
                                END;

                                IF UsePaymentDisc AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  Window.OPEN(Text007);
                                  IF FIND('-') THEN
                                    REPEAT
                                      Window.UPDATE(1,"No.");
                                      PayableVendLedgEntry.SETRANGE("Vendor No.","No.");
                                      GetVendLedgEntries(TRUE,TRUE);
                                      GetVendLedgEntries(FALSE,TRUE);
                                      CheckAmounts(TRUE);
                                    UNTIL (NEXT = 0) OR StopPayments;
                                END;

                                GenPayLine.LOCKTABLE;
                                GenPayLine.SETRANGE("No.",GenPayLine."No.");
                                IF GenPayLine.FINDLAST THEN BEGIN
                                  LastLineNo := GenPayLine."Line No.";
                                  GenPayLine.INIT;
                                END;

                                Window.OPEN(Text008);

                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,1,2147483647);
                                MakeGenPayLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,0);
                                MakeGenPayLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.DELETEALL;

                                Window.CLOSE;
                                ShowMessage(MessageText);
                              END;

               ReqFilterFields=No.,Payment Method Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=No;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             FRA=Options] }

      { 1120001;2;Field     ;
                  Name=LastPaymentDate;
                  CaptionML=[ENU=Last Payment Date;
                             FRA=DerniŠre date ‚ch‚ance];
                  SourceExpr=LastDueDateToPayReq }

      { 1120002;2;Field     ;
                  CaptionML=[ENU=Find Payment Discounts;
                             FRA=Rechercher les escomptes];
                  SourceExpr=UsePaymentDisc;
                  MultiLine=Yes }

      { 1120000;2;Field     ;
                  Name=SummarizePer;
                  CaptionML=[ENU=Summarize per;
                             FRA=Totaliser par];
                  OptionCaptionML=[ENU=" ,Vendor,Due date";
                                   FRA=" ,Fournisseur,Date d'‚ch‚ance"];
                  SourceExpr=SummarizePer }

      { 1120003;2;Field     ;
                  CaptionML=[ENU=Use Vendor Priority;
                             FRA=Utiliser priorit‚ fournisseur];
                  SourceExpr=UsePriority;
                  OnValidate=BEGIN
                               IF NOT UsePriority AND (AmountAvailable <> 0) THEN
                                 ERROR(Text011);
                             END;
                              }

      { 1120004;2;Field     ;
                  Name=AvailableAmountLCY;
                  CaptionML=[ENU=Available Amount (LCY);
                             FRA=Montant disponible DS];
                  SourceExpr=AmountAvailable;
                  OnValidate=BEGIN
                               AmountAvailableOnAfterValidate;
                             END;
                              }

      { 1120005;2;Field     ;
                  Name=CurrencyFilter;
                  CaptionML=[ENU=Currency Filter;
                             FRA=Filtre devise];
                  SourceExpr=CurrencyFilter;
                  TableRelation=Currency;
                  Editable=FALSE }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1120000 : TextConst 'ENU=Please enter the last payment date.;FRA=Veuillez entrer la derniŠre date d''‚ch‚ance.';
      Text001@1120001 : TextConst 'ENU=Please enter the posting date.;FRA=Veuillez entrer une date de comptabilisation.';
      Text003@1120003 : TextConst 'ENU=The selected last due date is earlier than %1.\\;FRA=La date de derniŠre ‚ch‚ance s‚lectionn‚e est ant‚rieure au %1.\\';
      Text004@1120004 : TextConst 'ENU=Do you still want to run the batch job?;FRA=Souhaitez-vous tout de mˆme ex‚cuter ce traitement par lots ?';
      Text005@1120005 : TextConst 'ENU=The batch job was interrupted.;FRA=Le traitement par lots a ‚t‚ interrompu.';
      Text006@1120006 : TextConst 'ENU=Processing vendors     #1##########;FRA=Traitement des fournisseurs             #1##########';
      Text007@1120007 : TextConst 'ENU=Processing vendors for payment discounts #1##########;FRA=Traitement des escomptes fournisseur    #1##########';
      Text008@1120008 : TextConst 'ENU=Inserting payment journal lines #1##########;FRA=Insertion des lignes f. paiement        #1##########';
      Text011@1120011 : TextConst 'ENU=Use Vendor Priority must be activated when the value in the Amount Available field is not 0.;FRA=Le champ Utiliser priorit‚ fournisseur doit ˆtre activ‚ lorsque la valeur du champ Montant disponible est diff‚rente de 0.';
      Text016@1120016 : TextConst 'ENU=" is already applied to %1 %2 for vendor %3.";FRA=" est d‚j… lettr‚(e) avec %1 %2 pour le fournisseur %3."';
      Vend2@1120023 : Record 23;
      GenPayHead@1120024 : Record 10865;
      GenPayLine@1120025 : Record 10866;
      VendLedgEntry@1120026 : Record 25;
      PayableVendLedgEntry@1120029 : TEMPORARY Record 317;
      TempPaymentPostBuffer@1120030 : TEMPORARY Record 10864;
      OldTempPaymentPostBuffer@1120031 : TEMPORARY Record 10864;
      PaymentClass@1120002 : Record 10860;
      NoSeriesMgt@1120032 : Codeunit 396;
      Window@1120034 : Dialog;
      UsePaymentDisc@1120035 : Boolean;
      PostingDate@1120036 : Date;
      LastDueDateToPayReq@1120037 : Date;
      NextDocNo@1120038 : Code[20];
      AmountAvailable@1120039 : Decimal;
      OriginalAmtAvailable@1120040 : Decimal;
      UsePriority@1120041 : Boolean;
      SummarizePer@1120042 : ' ,Vendor,Due date';
      LastLineNo@1120044 : Integer;
      NextEntryNo@1120045 : Integer;
      StopPayments@1120046 : Boolean;
      MessageText@1120047 : Text;
      GenPayLineInserted@1120048 : Boolean;
      CurrencyFilter@1120052 : Code[10];

    PROCEDURE SetGenPayLine@1120005(NewGenPayLine@1120000 : Record 10865);
    BEGIN
      GenPayHead := NewGenPayLine;
      GenPayLine."No." := NewGenPayLine."No.";
      PaymentClass.GET(GenPayHead."Payment Class");
      PostingDate := GenPayHead."Posting Date";
      CurrencyFilter := GenPayHead."Currency Code";
    END;

    PROCEDURE GetVendLedgEntries@1120004(Positive@1120000 : Boolean;Future@1120001 : Boolean);
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
      VendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      VendLedgEntry.SETRANGE(Open,TRUE);
      VendLedgEntry.SETRANGE(Positive,Positive);
      VendLedgEntry.SETRANGE("Currency Code",CurrencyFilter);
      VendLedgEntry.SETRANGE("Applies-to ID",'');
      IF Future THEN BEGIN
        VendLedgEntry.SETRANGE("Due Date",LastDueDateToPayReq + 1,31129999D);
        VendLedgEntry.SETRANGE("Pmt. Discount Date",PostingDate,LastDueDateToPayReq);
        VendLedgEntry.SETFILTER("Original Pmt. Disc. Possible",'<0');
      END ELSE
        VendLedgEntry.SETRANGE("Due Date",0D,LastDueDateToPayReq);
      VendLedgEntry.SETRANGE("On Hold",'');
      IF VendLedgEntry.FIND('-') THEN
        REPEAT
          SaveAmount;
        UNTIL VendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SaveAmount@1120003();
    BEGIN
      WITH GenPayLine DO BEGIN
        "Account Type" := "Account Type"::Vendor;
        VALIDATE("Account No.",VendLedgEntry."Vendor No.");
        "Posting Date" := VendLedgEntry."Posting Date";
        "Currency Factor" := VendLedgEntry."Adjusted Currency Factor";
        IF "Currency Factor" = 0 THEN
          "Currency Factor" := 1;
        VALIDATE("Currency Code",VendLedgEntry."Currency Code");
        VendLedgEntry.CALCFIELDS("Remaining Amount");
        IF ((VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::"Credit Memo") AND
            (VendLedgEntry."Remaining Pmt. Disc. Possible" <> 0) OR
            (VendLedgEntry."Document Type" = VendLedgEntry."Document Type"::Invoice)) AND
           (PostingDate <= VendLedgEntry."Pmt. Discount Date")
        THEN
          Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Original Pmt. Disc. Possible")
        ELSE
          Amount := -VendLedgEntry."Remaining Amount";
        VALIDATE(Amount);
      END;

      IF UsePriority THEN
        PayableVendLedgEntry.Priority := Vendor.Priority
      ELSE
        PayableVendLedgEntry.Priority := 0;
      PayableVendLedgEntry."Vendor No." := VendLedgEntry."Vendor No.";
      PayableVendLedgEntry."Entry No." := NextEntryNo;
      PayableVendLedgEntry."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
      PayableVendLedgEntry.Amount := GenPayLine.Amount;
      PayableVendLedgEntry."Amount (LCY)" := GenPayLine."Amount (LCY)";
      PayableVendLedgEntry.Positive := (PayableVendLedgEntry.Amount > 0);
      PayableVendLedgEntry.Future := (VendLedgEntry."Due Date" > LastDueDateToPayReq);
      PayableVendLedgEntry."Currency Code" := VendLedgEntry."Currency Code";
      PayableVendLedgEntry."Due Date" := VendLedgEntry."Due Date";
      PayableVendLedgEntry.INSERT;
      NextEntryNo := NextEntryNo + 1;
    END;

    PROCEDURE CheckAmounts@1120002(Future@1120000 : Boolean);
    VAR
      CurrencyBalance@1120001 : Decimal;
      PrevCurrency@1120002 : Code[10];
    BEGIN
      PayableVendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      PayableVendLedgEntry.SETRANGE(Future,Future);
      IF PayableVendLedgEntry.FIND('-') THEN BEGIN
        PrevCurrency := PayableVendLedgEntry."Currency Code";
        REPEAT
          IF PayableVendLedgEntry."Currency Code" <> PrevCurrency THEN BEGIN
            IF CurrencyBalance < 0 THEN BEGIN
              PayableVendLedgEntry.SETRANGE("Currency Code",PrevCurrency);
              PayableVendLedgEntry.DELETEALL;
              PayableVendLedgEntry.SETRANGE("Currency Code");
            END ELSE
              AmountAvailable := AmountAvailable - CurrencyBalance;
            CurrencyBalance := 0;
            PrevCurrency := PayableVendLedgEntry."Currency Code";
          END;
          IF (OriginalAmtAvailable = 0) OR
             (AmountAvailable >= CurrencyBalance + PayableVendLedgEntry."Amount (LCY)")
          THEN
            CurrencyBalance := CurrencyBalance + PayableVendLedgEntry."Amount (LCY)"
          ELSE
            PayableVendLedgEntry.DELETE;
        UNTIL PayableVendLedgEntry.NEXT = 0;
        IF CurrencyBalance < 0 THEN BEGIN
          PayableVendLedgEntry.SETRANGE("Currency Code",PrevCurrency);
          PayableVendLedgEntry.DELETEALL;
          PayableVendLedgEntry.SETRANGE("Currency Code");
        END ELSE
          IF OriginalAmtAvailable > 0 THEN
            AmountAvailable := AmountAvailable - CurrencyBalance;
        IF (OriginalAmtAvailable > 0) AND (AmountAvailable <= 0) THEN
          StopPayments := TRUE;
      END;
      PayableVendLedgEntry.RESET;
    END;

    LOCAL PROCEDURE MakeGenPayLines@1120001();
    VAR
      GenPayLine3@1120000 : Record 81;
    BEGIN
      TempPaymentPostBuffer.DELETEALL;

      IF PayableVendLedgEntry.FIND('-') THEN
        REPEAT
          PayableVendLedgEntry.SETRANGE("Vendor No.",PayableVendLedgEntry."Vendor No.");
          PayableVendLedgEntry.FIND('-');
          REPEAT
            VendLedgEntry.GET(PayableVendLedgEntry."Vendor Ledg. Entry No.");
            TempPaymentPostBuffer."Account No." := VendLedgEntry."Vendor No.";
            TempPaymentPostBuffer."Currency Code" := VendLedgEntry."Currency Code";
            IF SummarizePer = SummarizePer::"Due date" THEN
              TempPaymentPostBuffer."Due Date" := VendLedgEntry."Due Date";

            TempPaymentPostBuffer."Dimension Entry No." := 0;
            TempPaymentPostBuffer."Global Dimension 1 Code" := '';
            TempPaymentPostBuffer."Global Dimension 2 Code" := '';

            IF SummarizePer IN [SummarizePer::Vendor,SummarizePer::"Due date"] THEN BEGIN
              TempPaymentPostBuffer."Auxiliary Entry No." := 0;
              IF TempPaymentPostBuffer.FIND THEN BEGIN
                TempPaymentPostBuffer.Amount := TempPaymentPostBuffer.Amount + PayableVendLedgEntry.Amount;
                TempPaymentPostBuffer."Amount (LCY)" := TempPaymentPostBuffer."Amount (LCY)" + PayableVendLedgEntry."Amount (LCY)";
                TempPaymentPostBuffer.MODIFY;
              END ELSE BEGIN
                LastLineNo := LastLineNo + 10000;
                TempPaymentPostBuffer."Payment Line No." := LastLineNo;
                IF PaymentClass."Line No. Series" = '' THEN
                  NextDocNo := COPYSTR(GenPayHead."No." + '/' + FORMAT(LastLineNo),1,MAXSTRLEN(NextDocNo))
                ELSE
                  NextDocNo := NoSeriesMgt.GetNextNo(PaymentClass."Line No. Series",PostingDate,FALSE);
                TempPaymentPostBuffer."Document No." := NextDocNo;
                NextDocNo := INCSTR(NextDocNo);
                TempPaymentPostBuffer.Amount := PayableVendLedgEntry.Amount;
                TempPaymentPostBuffer."Amount (LCY)" := PayableVendLedgEntry."Amount (LCY)";
                Window.UPDATE(1,VendLedgEntry."Vendor No.");
                TempPaymentPostBuffer.INSERT;
              END;
              VendLedgEntry."Applies-to ID" := TempPaymentPostBuffer."Document No.";
              CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
            END ELSE BEGIN
              GenPayLine3.RESET;
              GenPayLine3.SETCURRENTKEY(
                "Account Type","Account No.","Applies-to Doc. Type","Applies-to Doc. No.");
              GenPayLine3.SETRANGE("Account Type",GenPayLine3."Account Type"::Vendor);
              GenPayLine3.SETRANGE("Account No.",VendLedgEntry."Vendor No.");
              GenPayLine3.SETRANGE("Applies-to Doc. Type",VendLedgEntry."Document Type");
              GenPayLine3.SETRANGE("Applies-to Doc. No.",VendLedgEntry."Document No.");
              IF GenPayLine3.FINDFIRST THEN
                GenPayLine3.FIELDERROR(
                  "Applies-to Doc. No.",
                  STRSUBSTNO(
                    Text016,
                    VendLedgEntry."Document Type",VendLedgEntry."Document No.",
                    VendLedgEntry."Vendor No."));

              TempPaymentPostBuffer."Applies-to Doc. Type" := VendLedgEntry."Document Type";
              TempPaymentPostBuffer."Applies-to Doc. No." := VendLedgEntry."Document No.";
              TempPaymentPostBuffer."Currency Factor" := VendLedgEntry."Adjusted Currency Factor";
              TempPaymentPostBuffer.Amount := PayableVendLedgEntry.Amount;
              TempPaymentPostBuffer."Amount (LCY)" := PayableVendLedgEntry."Amount (LCY)";
              TempPaymentPostBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code";
              TempPaymentPostBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code";
              TempPaymentPostBuffer."Auxiliary Entry No." := VendLedgEntry."Entry No.";
              Window.UPDATE(1,VendLedgEntry."Vendor No.");
              TempPaymentPostBuffer.INSERT;
            END;
            VendLedgEntry.CALCFIELDS("Remaining Amount");
            VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
            CODEUNIT.RUN(CODEUNIT::"Vend. Entry-Edit",VendLedgEntry);
          UNTIL PayableVendLedgEntry.NEXT = 0;
          PayableVendLedgEntry.SETFILTER("Vendor No.",'>%1',PayableVendLedgEntry."Vendor No.");
        UNTIL NOT PayableVendLedgEntry.FINDFIRST;

      CLEAR(OldTempPaymentPostBuffer);
      TempPaymentPostBuffer.SETCURRENTKEY("Document No.");
      IF TempPaymentPostBuffer.FIND('-') THEN
        REPEAT
          WITH GenPayLine DO BEGIN
            INIT;
            Window.UPDATE(1,TempPaymentPostBuffer."Account No.");
            IF SummarizePer = SummarizePer::" " THEN BEGIN
              LastLineNo := LastLineNo + 10000;
              "Line No." := LastLineNo;
              IF PaymentClass."Line No. Series" = '' THEN
                NextDocNo := GenPayHead."No." + '/' + FORMAT("Line No.")
              ELSE
                NextDocNo := NoSeriesMgt.GetNextNo(PaymentClass."Line No. Series",PostingDate,FALSE);
            END ELSE BEGIN
              "Line No." := TempPaymentPostBuffer."Payment Line No.";
              NextDocNo := TempPaymentPostBuffer."Document No.";
            END;
            "Document No." := NextDocNo;
            "Applies-to ID" := "Document No.";
            OldTempPaymentPostBuffer := TempPaymentPostBuffer;
            OldTempPaymentPostBuffer."Document No." := "Document No.";
            IF SummarizePer = SummarizePer::" " THEN BEGIN
              VendLedgEntry.GET(TempPaymentPostBuffer."Auxiliary Entry No.");
              VendLedgEntry."Applies-to ID" := NextDocNo;
              VendLedgEntry.MODIFY;
            END;
            "Account Type" := "Account Type"::Vendor;
            VALIDATE("Account No.",TempPaymentPostBuffer."Account No.");
            "Currency Code" := TempPaymentPostBuffer."Currency Code";
            Amount := TempPaymentPostBuffer.Amount;
            IF Amount > 0 THEN
              "Debit Amount" := Amount
            ELSE
              "Credit Amount" := -Amount;
            "Amount (LCY)" := TempPaymentPostBuffer."Amount (LCY)";
            "Currency Factor" := TempPaymentPostBuffer."Currency Factor";
            IF ("Currency Factor" = 0) AND (Amount <> 0) THEN
              "Currency Factor" := Amount / "Amount (LCY)";
            Vend2.GET("Account No.");
            VALIDATE("Bank Account Code",Vend2."Preferred Bank Account");
            "Payment Class" := GenPayHead."Payment Class";
            VALIDATE("Status No.");
            "Posting Date" := PostingDate;
            IF SummarizePer = SummarizePer::" " THEN BEGIN
              "Applies-to Doc. Type" := VendLedgEntry."Document Type";
              "Applies-to Doc. No." := VendLedgEntry."Document No.";
            END;
            CASE SummarizePer OF
              SummarizePer::" ":
                "Due Date" := VendLedgEntry."Due Date";
              SummarizePer::Vendor:
                BEGIN
                  PayableVendLedgEntry.SETCURRENTKEY("Vendor No.","Due Date");
                  PayableVendLedgEntry.SETRANGE("Vendor No.",TempPaymentPostBuffer."Account No.");
                  PayableVendLedgEntry.FIND('-');
                  "Due Date" := PayableVendLedgEntry."Due Date";
                  PayableVendLedgEntry.DELETEALL;
                END;
              SummarizePer::"Due date":
                "Due Date" := TempPaymentPostBuffer."Due Date";
            END;
            "Dimension Set ID" := VendLedgEntry."Dimension Set ID";
            IF Amount <> 0 THEN
              INSERT;
            GenPayLineInserted := TRUE;
          END;
        UNTIL TempPaymentPostBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE ShowMessage@1120000(Text@1120000 : Text);
    BEGIN
      IF (Text <> '') AND GenPayLineInserted THEN
        MESSAGE(Text);
    END;

    LOCAL PROCEDURE AmountAvailableOnAfterValidate@19035272();
    BEGIN
      IF AmountAvailable <> 0 THEN
        UsePriority := TRUE;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}


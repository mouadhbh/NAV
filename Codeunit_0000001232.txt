OBJECT Codeunit 1232 SEPA DD-Prepare Source
{
  OBJECT-PROPERTIES
  {
    Date=09/09/14;
    Time=12:00:00;
    Version List=NAVW18.00,NAVFR8.00;
  }
  PROPERTIES
  {
    TableNo=1208;
    OnRun=VAR
            DirectDebitCollectionEntry@1000 : Record 1208;
          BEGIN
            DirectDebitCollectionEntry.COPYFILTERS(Rec);
            CopyLines(DirectDebitCollectionEntry,Rec);
          END;

  }
  CODE
  {
    VAR
      HasErrorsErr@1120000 : TextConst 'ENU=The file export has one or more errors. For each of the lines to be exported, resolve any errors that are displayed in the File Export Errors FactBox.;FRA=L''exportation de fichier comporte une ou plusieurs erreurs. Pour chacune des lignes … exporter, corrigez les erreurs affich‚es dans le r‚capitulatif des erreurs d''exportation de fichier.';

    LOCAL PROCEDURE CopyLines@4(VAR FromDirectDebitCollectionEntry@1000 : Record 1208;VAR ToDirectDebitCollectionEntry@1001 : Record 1208);
    BEGIN
      IF NOT FromDirectDebitCollectionEntry.ISEMPTY THEN BEGIN
        FromDirectDebitCollectionEntry.SETFILTER(Status,'%1|%2',
          FromDirectDebitCollectionEntry.Status::New,FromDirectDebitCollectionEntry.Status::"File Created");
        IF FromDirectDebitCollectionEntry.FINDSET THEN
          REPEAT
            ToDirectDebitCollectionEntry := FromDirectDebitCollectionEntry;
            ToDirectDebitCollectionEntry.INSERT;
          UNTIL FromDirectDebitCollectionEntry.NEXT = 0
      END ELSE
        CreateTempCollectionEntries(FromDirectDebitCollectionEntry,ToDirectDebitCollectionEntry);
    END;

    LOCAL PROCEDURE CreateTempCollectionEntries@1(VAR FromDirectDebitCollectionEntry@1001 : Record 1208;VAR ToDirectDebitCollectionEntry@1000 : Record 1208);
    VAR
      DirectDebitCollection@1120002 : Record 1207;
      PaymentHeader@1120000 : Record 10865;
      PaymentLine@1120001 : Record 10866;
      SEPADDCheckLine@1120003 : Codeunit 1233;
      AppliesToEntryNo@1120005 : Integer;
    BEGIN
      ToDirectDebitCollectionEntry.RESET;
      DirectDebitCollection.GET(FromDirectDebitCollectionEntry.GETRANGEMIN("Direct Debit Collection No."));
      PaymentHeader.GET(DirectDebitCollection.Identifier);
      PaymentLine.SETRANGE("No.",PaymentHeader."No.");
      IF PaymentLine.FINDSET THEN
        WITH ToDirectDebitCollectionEntry DO
          REPEAT
            INIT;
            "Entry No." := PaymentLine."Line No.";
            "Direct Debit Collection No." := DirectDebitCollection."No.";
            DeletePaymentFileErrors;
            IF SEPADDCheckLine.CheckPaymentLine(ToDirectDebitCollectionEntry,PaymentLine,AppliesToEntryNo) THEN BEGIN
              VALIDATE("Customer No.",PaymentLine."Account No.");
              VALIDATE("Applies-to Entry No.",AppliesToEntryNo);
              "Transfer Date" := PaymentHeader."Posting Date";
              "Currency Code" := PaymentLine."Currency Code";
              VALIDATE("Transfer Amount",PaymentLine."Credit Amount");
              VALIDATE("Mandate ID",PaymentLine."Direct Debit Mandate ID");
              INSERT;
              SEPADDCheckLine.CheckCollectionEntry(ToDirectDebitCollectionEntry);
            END;
          UNTIL PaymentLine.NEXT = 0;

      IF DirectDebitCollection.HasPaymentFileErrors THEN BEGIN
        COMMIT;
        ERROR(HasErrorsErr);
      END;
    END;

    BEGIN
    END.
  }
}


OBJECT Codeunit 5343 CRM Sales Order to Sales Order
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CannotCreateSalesOrderInNAVTxt@1003 : TextConst 'ENU=The sales order cannot be created.;FRA=Impossible de cr‚er la commande vente.';
      CannotFindCRMAccountForOrderErr@1014 : TextConst '@@@="%1=Dynamics CRM Sales Order Name";ENU=The Dynamics CRM account for CRM sales order %1 does not exist.;FRA=Le compte Dynamics CRM pour la commande vente CRM %1 n''existe pas.';
      ItemDoesNotExistErr@1002 : TextConst '@@@="%1= the text: ""The Dynamics CRM Sales Order cannot be created."", %2=product name";ENU=%1 The item %2 does not exist.;FRA=%1 L''article %2 n''existe pas.';
      NoCustomerErr@1005 : TextConst '@@@="%1= the text: ""The Dynamics CRM Sales Order cannot be created."", %2=sales order title";ENU=%1 There is no potential customer defined on the Dynamics CRM sales order %2.;FRA=%1 Aucun client potentiel n''est d‚fini dans la commande vente Dynamics CRM %2.';
      LastSalesLineNo@1004 : Integer;
      NotCoupledCustomerErr@1012 : TextConst '@@@="%1= the text: ""The Dynamics CRM Sales Order cannot be created."", %2=account name";ENU=%1 There is no customer coupled to Dynamics CRM account %2.;FRA=%1 Aucun client n''est coupl‚ au compte Dynamics CRM %2.';
      NotCoupledCRMProductErr@1006 : TextConst '@@@="%1= the text: ""The Dynamics CRM Sales Order cannot be created."", %2=product name";ENU=%1 The Dynamics CRM product %2 is not coupled to an item.;FRA=%1 Le produit Dynamics CRM %2 n''est pas coupl‚ … un article.';
      NotCoupledCRMResourceErr@1007 : TextConst '@@@="%1= the text: ""The Dynamics CRM Sales Order cannot be created."", %2=resource name";ENU=%1 The Dynamics CRM resource %2 is not coupled to a resource.;FRA=%1 La ressource Dynamics CRM %2 n''est pas coupl‚e … une ressource.';
      NotCoupledCRMSalesOrderErr@1000 : TextConst '@@@="%1=sales order number";ENU=The Dynamics CRM sales order %1 is not coupled.;FRA=La commande vente Dynamics CRM %1 n''est pas coupl‚e.';
      NotCoupledSalesHeaderErr@1015 : TextConst '@@@="%1=sales order number";ENU=The sales order %1 is not coupled to Dynamics CRM.;FRA=La commande vente %1 n''est pas coupl‚e … Dynamics CRM.';
      OverwriteCRMDiscountQst@1016 : TextConst 'ENU=There is a discount on the Dynamics CRM sales order, which will be overwritten by Dynamics NAV settings. You will have the possibility to update the discounts directly on the sales order, after it is created. Do you want to continue?;FRA=Une remise sur la commande vente Dynamics CRM va ˆtre remplac‚e par les paramŠtres Dynamics NAV. Vous aurez la possibilit‚ de mettre … jour les remises directement sur la commande vente, aprŠs sa cr‚ation. Voulez-vous continuerÿ?';
      ReplaceSalesOrderQst@1010 : TextConst '@@@="%1=external document number";ENU="The Sales Order with external document number = ''%1'' already exists. Do you want to overwrite it?";FRA=La commande vente portant le num‚ro de document externe ®ÿ%1ÿ¯ existe d‚j…. Voulez-vous la remplacerÿ?';
      ResourceDoesNotExistErr@1009 : TextConst '@@@="%1= the text: ""The Dynamics CRM Sales Order cannot be created."", %2=product name";ENU=%1 The resource %2 does not exist.;FRA=%1 La ressource %2 n''existe pas.';
      WriteInProductDoesNotExistErr@1008 : TextConst '@@@="%1= the text: ""The Dynamics CRM Sales Order cannot be created."", %2=product name";ENU=%1 The write-in product %2 does not exist.;FRA=%1 Le produit hors catalogue %2 n''existe pas.';
      WrongCurrencyErr@1001 : TextConst '@@@="%1= the text: ""The Dynamics CRM Sales Order cannot be created."", %2 and %3= currency ISO code (example: ''DKK'')";ENU=%1 It uses currency %2 which is different than local currency %3.;FRA=%1 Utilisation de la devise %2, qui est diff‚rente de la devise soci‚t‚ %3.';
      UnexpectedProductTypeErr@1011 : TextConst '@@@="%1= the text: ""The Dynamics CRM Sales Order cannot be created."", %2=product name";ENU=%1 Unexpected value of product type code for product %2. The supported values are: sales inventory, services.;FRA=%1 Valeur inattendue de code type pour le produit %2. Les valeurs prises en charge sont les suivantesÿ: stocks ventes, services.';
      ZombieCouplingErr@1013 : TextConst 'ENU=Although the coupling from Dynamics CRM exists, the sales order had been manually deleted. If needed, please use the menu to create it again in Dynamics NAV.;FRA=Bien que le couplage … partir de Dynamics CRM existe, la commande vente a ‚t‚ supprim‚e manuellement. Utilisez au besoin le menu pour la recr‚er dans Dynamics NAV.';

    LOCAL PROCEDURE ApplySalesOrderDiscounts@22(CRMSalesorder@1001 : Record 5353;VAR SalesHeader@1000 : Record 36);
    VAR
      SalesCalcDiscountByType@1002 : Codeunit 56;
      CRMDiscountAmount@1003 : Decimal;
    BEGIN
      // No discounts to apply
      IF (CRMSalesorder.DiscountAmount = 0 ) AND (CRMSalesorder.DiscountPercentage = 0) THEN
        EXIT;

      // Attempt to set the discount, if NAV general and customer settings allow it
      // Using CRM discounts
      CRMDiscountAmount := CRMSalesorder.TotalLineItemAmount - CRMSalesorder.TotalAmount;
      IF SalesCalcDiscountByType.ApplyInvDiscBasedOnAmt(CRMDiscountAmount,SalesHeader) THEN
        EXIT;

      // NAV settings (in G/L Setup as well as per-customer discounts) did not allow using the CRM discounts
      // Using NAV discounts
      // But the user will be able to manually update the discounts after the order is created in NAV
      IF NOT CONFIRM(OverwriteCRMDiscountQst,TRUE) THEN
        ERROR('');
    END;

    LOCAL PROCEDURE CopyBillToInformationIfNotEmpty@7(CRMSalesorder@1001 : Record 5353;VAR SalesHeader@1000 : Record 36);
    BEGIN
      // If the Bill-To fields in CRM are all empty, then let NAV keep its standard behavior (takes Bill-To from the Customer information)
      IF ((CRMSalesorder.BillTo_Line1 = '') AND
          (CRMSalesorder.BillTo_Line2 = '') AND
          (CRMSalesorder.BillTo_Line3 = '') AND
          (CRMSalesorder.BillTo_City = '') AND
          (CRMSalesorder.BillTo_Name = '') AND
          (CRMSalesorder.BillTo_PostalCode = '') AND
          (CRMSalesorder.BillTo_Country = '') AND
          (CRMSalesorder.BillTo_StateOrProvince = ''))
      THEN
        EXIT;

      SalesHeader.VALIDATE("Bill-to Address",FORMAT(CRMSalesorder.BillTo_Line1,STRLEN(SalesHeader."Bill-to Address")));
      SalesHeader.VALIDATE("Bill-to Address 2",FORMAT(CRMSalesorder.BillTo_Line2,STRLEN(SalesHeader."Bill-to Address 2")));
      SalesHeader.VALIDATE("Bill-to City",FORMAT(CRMSalesorder.BillTo_City,STRLEN(SalesHeader."Bill-to City")));
      SalesHeader.VALIDATE("Bill-to Name",FORMAT(CRMSalesorder.BillTo_Name,STRLEN(SalesHeader."Bill-to Name")));
      SalesHeader.VALIDATE("Bill-to Name 2",'');
      SalesHeader.VALIDATE("Bill-to Post Code",FORMAT(CRMSalesorder.BillTo_PostalCode,STRLEN(SalesHeader."Bill-to Post Code")));
      SalesHeader.VALIDATE("Bill-to Contact",'');
      SalesHeader.VALIDATE("Bill-to Contact No.",'');
      SalesHeader.VALIDATE(
        "Bill-to Country/Region Code",FORMAT(CRMSalesorder.BillTo_Country,STRLEN(SalesHeader."Bill-to Country/Region Code")));
      SalesHeader.VALIDATE("Bill-to County",FORMAT(CRMSalesorder.BillTo_StateOrProvince,STRLEN(SalesHeader."Bill-to County")));
    END;

    LOCAL PROCEDURE CopyShipToInformationIfNotEmpty@31(CRMSalesorder@1001 : Record 5353;VAR SalesHeader@1000 : Record 36);
    BEGIN
      // If the Ship-To fields in CRM are all empty, then let NAV keep its standard behavior (takes Bill-To from the Customer information)
      IF ((CRMSalesorder.ShipTo_Line1 = '') AND
          (CRMSalesorder.ShipTo_Line2 = '') AND
          (CRMSalesorder.ShipTo_Line3 = '') AND
          (CRMSalesorder.ShipTo_City = '') AND
          (CRMSalesorder.ShipTo_Name = '') AND
          (CRMSalesorder.ShipTo_PostalCode = '') AND
          (CRMSalesorder.ShipTo_Country = '') AND
          (CRMSalesorder.ShipTo_StateOrProvince = ''))
      THEN
        EXIT;

      SalesHeader.VALIDATE("Ship-to Address",FORMAT(CRMSalesorder.ShipTo_Line1,STRLEN(SalesHeader."Ship-to Address")));
      SalesHeader.VALIDATE("Ship-to Address 2",FORMAT(CRMSalesorder.ShipTo_Line2,STRLEN(SalesHeader."Ship-to Address 2")));
      SalesHeader.VALIDATE("Ship-to City",FORMAT(CRMSalesorder.ShipTo_City,STRLEN(SalesHeader."Ship-to City")));
      SalesHeader.VALIDATE("Ship-to Name",FORMAT(CRMSalesorder.ShipTo_Name,STRLEN(SalesHeader."Ship-to Name")));
      SalesHeader.VALIDATE("Ship-to Name 2",'');
      SalesHeader.VALIDATE("Ship-to Post Code",FORMAT(CRMSalesorder.ShipTo_PostalCode,STRLEN(SalesHeader."Ship-to Post Code")));
      SalesHeader.VALIDATE("Ship-to Contact",'');
      SalesHeader.VALIDATE(
        "Ship-to Country/Region Code",FORMAT(CRMSalesorder.ShipTo_Country,STRLEN(SalesHeader."Ship-to Country/Region Code")));
      SalesHeader.VALIDATE("Ship-to County",FORMAT(CRMSalesorder.ShipTo_StateOrProvince,STRLEN(SalesHeader."Ship-to County")));
    END;

    LOCAL PROCEDURE CoupledSalesHeaderExists@16(CRMSalesorder@1001 : Record 5353) : Boolean;
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      IF GetCoupledSalesHeader(CRMSalesorder,SalesHeader) THEN
        EXIT(TRUE);

      EXIT(FALSE);
    END;

    PROCEDURE CreateInNAV@1(CRMSalesorder@1012 : Record 5353;VAR SalesHeader@1000 : Record 36) : Boolean;
    BEGIN
      CRMSalesorder.TESTFIELD(StateCode,CRMSalesorder.StateCode::Submitted);
      EXIT(CreateOrReplaceSalesOrder(CRMSalesorder,SalesHeader));
    END;

    LOCAL PROCEDURE CreateOrReplaceSalesOrder@15(CRMSalesorder@1001 : Record 5353;VAR SalesHeader@1000 : Record 36) : Boolean;
    VAR
      CRMIntegrationRecord@1003 : Record 5331;
    BEGIN
      IF ISNULLGUID(CRMSalesorder.SalesOrderId) THEN
        EXIT;

      // If an order with the same external document number was already created, ask if the user wants to overwrite it
      IF SalesOrderHeaderExists(DELSTR(CRMSalesorder.OrderNumber,1,STRLEN(SalesHeader."External Document No."))) THEN
        IF NOT CONFIRM(STRSUBSTNO(ReplaceSalesOrderQst,CRMSalesorder.OrderNumber)) THEN
          EXIT(FALSE);

      ValidateCRMTransactionCurrencyIsLCY(CRMSalesorder.TransactionCurrencyId);
      CreateSalesOrderHeader(CRMSalesorder,SalesHeader);
      CreateSalesOrderLines(CRMSalesorder,SalesHeader);
      CRMIntegrationRecord.CoupleRecordIdToCRMID(SalesHeader.RECORDID,CRMSalesorder.SalesOrderId);
      // Flag sales order has been submitted to NAV.
      SetLastBackOfficeSubmit(CRMSalesorder,TODAY);
      EXIT(TRUE);
    END;

    [EventSubscriber(Table,36,OnAfterDeleteEvent)]
    PROCEDURE ClearLastBackOfficeSubmitOnSalesHeaderDelete@14(VAR Rec@1000 : Record 36);
    VAR
      CRMSalesorder@1002 : Record 5353;
      CRMIntegrationManagement@1001 : Codeunit 5330;
    BEGIN
      IF NOT CRMIntegrationManagement.IsCRMIntegrationEnabled THEN
        EXIT;
      IF NOT GetCRMSalesOrder(CRMSalesorder,Rec."External Document No.") THEN
        EXIT;
      SetLastBackOfficeSubmit(CRMSalesorder,0D);
    END;

    LOCAL PROCEDURE CreateSalesOrderHeader@10(CRMSalesorder@1001 : Record 5353;VAR SalesHeader@1000 : Record 36);
    VAR
      Customer@1010 : Record 18;
    BEGIN
      SalesHeader.INIT;
      SalesHeader.VALIDATE("Document Type",SalesHeader."Document Type"::Order);
      SalesHeader.VALIDATE(Status,SalesHeader.Status::Open);
      SalesHeader.InitInsert;
      GetCoupledCustomer(CRMSalesorder,Customer);
      SalesHeader.VALIDATE("Sell-to Customer No.",Customer."No.");
      SalesHeader.VALIDATE("External Document No.",FORMAT(CRMSalesorder.OrderNumber,MAXSTRLEN(SalesHeader."External Document No.")));
      SalesHeader.VALIDATE("Currency Code",''); // LCY
      SalesHeader.VALIDATE("Requested Delivery Date",CRMSalesorder.RequestDeliveryBy);
      CopyBillToInformationIfNotEmpty(CRMSalesorder,SalesHeader);
      CopyShipToInformationIfNotEmpty(CRMSalesorder,SalesHeader);
      SalesHeader.VALIDATE("Payment Discount %",CRMSalesorder.DiscountPercentage);
      SalesHeader.INSERT;
    END;

    LOCAL PROCEDURE CreateSalesOrderLines@13(CRMSalesorder@1001 : Record 5353;SalesHeader@1000 : Record 36);
    VAR
      CRMSalesorderdetail@1007 : Record 5354;
      SalesLine@1004 : Record 37;
    BEGIN
      // If any of the products on the lines are not found in NAV, err
      CRMSalesorderdetail.SETRANGE(SalesOrderId,CRMSalesorder.SalesOrderId); // Get all sales order lines

      IF CRMSalesorderdetail.FINDSET THEN BEGIN
        REPEAT
          InitializeSalesOrderLine(CRMSalesorderdetail,SalesHeader,SalesLine);
          SalesLine.INSERT;
        UNTIL CRMSalesorderdetail.NEXT = 0;
      END;

      ApplySalesOrderDiscounts(CRMSalesorder,SalesHeader);
    END;

    PROCEDURE CRMIsCoupledToValidRecord@9(CRMSalesorder@1002 : Record 5353;NAVTableID@1001 : Integer) : Boolean;
    VAR
      CRMIntegrationManagement@1000 : Codeunit 5330;
      CRMCouplingManagement@1003 : Codeunit 5331;
    BEGIN
      EXIT(CRMIntegrationManagement.IsCRMIntegrationEnabled AND
        CRMCouplingManagement.IsRecordCoupledToNAV(CRMSalesorder.SalesOrderId,NAVTableID) AND
        CoupledSalesHeaderExists(CRMSalesorder));
    END;

    PROCEDURE CRMSalesOrderExists@5(ExternalDocumentNo@1000 : Code[35]) : Boolean;
    VAR
      CRMSalesorder@1002 : Record 5353;
    BEGIN
      EXIT(GetCRMSalesOrder(CRMSalesorder,ExternalDocumentNo));
    END;

    PROCEDURE GetCRMSalesOrder@19(VAR CRMSalesorder@1001 : Record 5353;ExternalDocumentNo@1000 : Code[35]) : Boolean;
    BEGIN
      CRMSalesorder.SETRANGE(OrderNumber,ExternalDocumentNo);
      IF CRMSalesorder.FINDFIRST THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    [TryFunction]
    PROCEDURE GetCoupledCRMSalesorder@21(SalesHeader@1000 : Record 36;VAR CRMSalesorder@1001 : Record 5353);
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
      CoupledCRMId@1004 : GUID;
    BEGIN
      IF SalesHeader.ISEMPTY THEN
        ERROR(NotCoupledSalesHeaderErr,SalesHeader."No.");

      IF NOT CRMIntegrationRecord.FindIDFromRecordID(SalesHeader.RECORDID,CoupledCRMId) THEN
        ERROR(NotCoupledSalesHeaderErr,SalesHeader."No.");

      IF CRMSalesorder.GET(CoupledCRMId) THEN
        EXIT;

      // If we reached this point, a zombie coupling exists but the sales order most probably was deleted manually by the user.
      CRMIntegrationRecord.RemoveCouplingToCRMID(CoupledCRMId,DATABASE::"Sales Header");
      ERROR(ZombieCouplingErr);
    END;

    [TryFunction]
    PROCEDURE GetCoupledCustomer@4(CRMSalesorder@1001 : Record 5353;VAR Customer@1000 : Record 18);
    VAR
      CRMAccount@1004 : Record 5341;
      CRMIntegrationRecord@1002 : Record 5331;
      NAVCustomerRecordId@1003 : RecordID;
      CRMAccountId@1005 : GUID;
    BEGIN
      IF ISNULLGUID(CRMSalesorder.CustomerId) THEN
        ERROR(NoCustomerErr,CannotCreateSalesOrderInNAVTxt,CRMSalesorder.Description);

      // Get the ID of the CRM Account associated to the sales order. Works for both CustomerType(s): account, contact
      IF NOT GetCRMAccountOfCRMSalesOrder(CRMSalesorder,CRMAccount) THEN
        ERROR(CannotFindCRMAccountForOrderErr,CRMSalesorder.Name);
      CRMAccountId := CRMAccount.AccountId;

      IF NOT CRMIntegrationRecord.FindRecordIDFromID(CRMAccountId,DATABASE::Customer,NAVCustomerRecordId)
      THEN
        ERROR(NotCoupledCustomerErr,CannotCreateSalesOrderInNAVTxt,CRMAccount.Name);

      Customer.GET(NAVCustomerRecordId);
    END;

    [TryFunction]
    PROCEDURE GetCoupledSalesHeader@2(CRMSalesorder@1001 : Record 5353;VAR SalesHeader@1000 : Record 36);
    VAR
      CRMIntegrationRecord@1002 : Record 5331;
      NAVSalesHeaderRecordId@1003 : RecordID;
    BEGIN
      IF ISNULLGUID(CRMSalesorder.SalesOrderId) THEN
        ERROR(NotCoupledCRMSalesOrderErr,CRMSalesorder.OrderNumber);

      // Attempt to find the coupled sales header
      IF NOT CRMIntegrationRecord.FindRecordIDFromID(CRMSalesorder.SalesOrderId,DATABASE::"Sales Header",NAVSalesHeaderRecordId) THEN
        ERROR(NotCoupledCRMSalesOrderErr,CRMSalesorder.OrderNumber);

      IF SalesHeader.GET(NAVSalesHeaderRecordId) THEN
        EXIT;

      // If we reached this point, a zombie coupling exists but the sales order most probably was deleted manually by the user.
      CRMIntegrationRecord.RemoveCouplingToCRMID(CRMSalesorder.SalesOrderId,DATABASE::"Sales Header");
      ERROR(ZombieCouplingErr);
    END;

    PROCEDURE GetCRMAccountOfCRMSalesOrder@11(CRMSalesorder@1002 : Record 5353;VAR CRMAccount@1000 : Record 5341) : Boolean;
    VAR
      CRMContact@1001 : Record 5342;
    BEGIN
      IF CRMSalesorder.CustomerIdType = CRMSalesorder.CustomerIdType::account THEN
        IF NOT CRMAccount.GET(CRMSalesorder.CustomerId) THEN
          EXIT(FALSE);

      IF CRMSalesorder.CustomerIdType = CRMSalesorder.CustomerIdType::contact THEN BEGIN
        IF NOT CRMContact.GET(CRMSalesorder.CustomerId) THEN
          EXIT(FALSE);
        IF NOT CRMAccount.GET(CRMContact.ParentCustomerId) THEN
          EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    PROCEDURE GetCRMContactOfCRMSalesOrder@17(CRMSalesorder@1002 : Record 5353;VAR CRMContact@1000 : Record 5342) : Boolean;
    BEGIN
      IF CRMSalesorder.CustomerIdType <> CRMSalesorder.CustomerIdType::contact THEN
        EXIT(FALSE);

      IF NOT CRMContact.GET(CRMSalesorder.CustomerId) THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE InitializeSalesOrderLine@18(CRMSalesorderdetail@1003 : Record 5354;SalesHeader@1000 : Record 36;VAR SalesLine@1002 : Record 37);
    VAR
      CRMProduct@1004 : Record 5348;
    BEGIN
      IF ISNULLGUID(CRMSalesorderdetail.ProductId) THEN // This is a CRM write-in product, not supported in NAV
        ERROR(WriteInProductDoesNotExistErr,CannotCreateSalesOrderInNAVTxt,CRMSalesorderdetail.ProductDescription);
      CRMProduct.GET(CRMSalesorderdetail.ProductId);

      SalesLine.INIT;
      SalesLine.VALIDATE("Document Type",SalesHeader."Document Type");
      SalesLine.VALIDATE("Document No.",SalesHeader."No.");
      LastSalesLineNo := LastSalesLineNo + 10000;
      SalesLine.VALIDATE("Line No.",LastSalesLineNo);

      CASE CRMProduct.ProductTypeCode OF
        CRMProduct.ProductTypeCode::SalesInventory:
          InitializeSalesOrderLineFromItem(CRMProduct,SalesLine);
        CRMProduct.ProductTypeCode::Services:
          InitializeSalesOrderLineFromResource(CRMProduct,SalesLine);
        ELSE
          ERROR(UnexpectedProductTypeErr,CannotCreateSalesOrderInNAVTxt,CRMProduct.ProductNumber);
      END;

      SalesLine.VALIDATE(Quantity,CRMSalesorderdetail.Quantity);
      SalesLine.VALIDATE("Unit Price",CRMSalesorderdetail.PricePerUnit);
      SalesLine.VALIDATE(Amount,CRMSalesorderdetail.BaseAmount);
      SalesLine.VALIDATE("Line Discount %",CRMSalesorderdetail.ManualDiscountAmount * 100 / CRMSalesorderdetail.BaseAmount);
    END;

    LOCAL PROCEDURE InitializeSalesOrderLineFromItem@8(CRMProduct@1001 : Record 5348;VAR SalesLine@1002 : Record 37);
    VAR
      CRMIntegrationRecord@1003 : Record 5331;
      Item@1005 : Record 27;
      NAVItemRecordID@1000 : RecordID;
    BEGIN
      // Attempt to find the coupled item
      IF NOT CRMIntegrationRecord.FindRecordIDFromID(CRMProduct.ProductId,DATABASE::Item,NAVItemRecordID) THEN
        ERROR(NotCoupledCRMProductErr,CannotCreateSalesOrderInNAVTxt,CRMProduct.Name);

      IF NOT Item.GET(NAVItemRecordID) THEN
        ERROR(ItemDoesNotExistErr,CannotCreateSalesOrderInNAVTxt,CRMProduct.ProductNumber);
      SalesLine.VALIDATE(Type,SalesLine.Type::Item);
      SalesLine.VALIDATE("No.",Item."No.");
    END;

    LOCAL PROCEDURE InitializeSalesOrderLineFromResource@6(CRMProduct@1001 : Record 5348;VAR SalesLine@1002 : Record 37);
    VAR
      CRMIntegrationRecord@1003 : Record 5331;
      Resource@1005 : Record 156;
      NAVResourceRecordID@1000 : RecordID;
    BEGIN
      // Attempt to find the coupled resource
      IF NOT CRMIntegrationRecord.FindRecordIDFromID(CRMProduct.ProductId,DATABASE::Resource,NAVResourceRecordID) THEN
        ERROR(NotCoupledCRMResourceErr,CannotCreateSalesOrderInNAVTxt,CRMProduct.Name);

      IF NOT Resource.GET(CRMProduct.ProductNumber) THEN
        ERROR(ResourceDoesNotExistErr,CannotCreateSalesOrderInNAVTxt,CRMProduct.ProductNumber);
      SalesLine.VALIDATE(Type,SalesLine.Type::Resource);
      SalesLine.VALIDATE("No.",Resource."No.");
    END;

    LOCAL PROCEDURE SalesOrderHeaderExists@12(ExternalDocumentNo@1000 : Code[35]) : Boolean;
    VAR
      SalesHeader@1002 : Record 36;
    BEGIN
      SalesHeader.SETRANGE("External Document No.",ExternalDocumentNo);
      IF SalesHeader.FINDFIRST THEN
        EXIT(TRUE);
      EXIT(FALSE);
    END;

    PROCEDURE SetLastBackOfficeSubmit@20(VAR CRMSalesorder@1001 : Record 5353;NewValue@1000 : Date);
    BEGIN
      IF CRMSalesorder.LastBackofficeSubmit = NewValue THEN
        EXIT;
      CRMSalesorder.StateCode := CRMSalesorder.StateCode::Active;
      CRMSalesorder.MODIFY(TRUE);
      CRMSalesorder.LastBackofficeSubmit := NewValue;
      CRMSalesorder.MODIFY(TRUE);
      CRMSalesorder.StateCode := CRMSalesorder.StateCode::Submitted;
      CRMSalesorder.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE ValidateCRMTransactionCurrencyIsLCY@3(TransactionCurrencyId@1000 : GUID);
    VAR
      CRMTransactioncurrency@1001 : Record 5345;
      GeneralLedgerSetup@1002 : Record 98;
    BEGIN
      CRMTransactioncurrency.GET(TransactionCurrencyId);
      GeneralLedgerSetup.GET;
      IF CRMTransactioncurrency.ISOCurrencyCode <> GeneralLedgerSetup."LCY Code" THEN
        ERROR(WrongCurrencyErr,CannotCreateSalesOrderInNAVTxt,CRMTransactioncurrency.ISOCurrencyCode,GeneralLedgerSetup."LCY Code");
    END;

    BEGIN
    END.
  }
}


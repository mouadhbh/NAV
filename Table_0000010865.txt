OBJECT Table 10865 Payment Header
{
  OBJECT-PROPERTIES
  {
    Date=23/10/15;
    Time=12:00:00;
    Version List=NAVFR9.00.00.43402;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               IF "No." = '' THEN BEGIN
                 IF PAGE.RUNMODAL(PAGE::"Payment Class List",GetProcess) = ACTION::LookupOK THEN
                   Process := GetProcess;
                 Process.TESTFIELD("Header No. Series");
                 NoSeriesMgt.InitSeries(Process."Header No. Series",xRec."No. Series",0D,"No.","No. Series");
                 VALIDATE("Payment Class",Process.Code);
               END;
               InitHeader;
             END;

    OnDelete=VAR
               PaymentLine@1120000 : Record 10866;
             BEGIN
               IF "Status No." > 0 THEN
                 ERROR(Text000);

               PaymentLine.SETRANGE("No.","No.");
               PaymentLine.SETFILTER("Copied To No.",'<>''''');
               IF PaymentLine.FINDFIRST THEN
                 ERROR(Text000);
               PaymentLine.SETRANGE("Copied To No.");
               PaymentLine.DELETEALL(TRUE);
             END;

    CaptionML=[ENU=Payment Header;
               FRA=En-tˆte bordereau];
    PasteIsValid=No;
    LookupPageID=Page10870;
    DrillDownPageID=Page10870;
  }
  FIELDS
  {
    { 1   ;   ;No.                 ;Code20        ;OnValidate=BEGIN
                                                                IF "No." <> xRec."No." THEN BEGIN
                                                                  Process := GetProcess;
                                                                  NoSeriesMgt.TestManual(Process."Header No. Series");
                                                                  "No. Series" := '';
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=No.;
                                                              FRA=Nø];
                                                   Editable=No }
    { 2   ;   ;Currency Code       ;Code10        ;TableRelation=Currency;
                                                   OnValidate=VAR
                                                                PaymentLine@1120000 : Record 10866;
                                                                CompanyBank@1120001 : Record 270;
                                                              BEGIN
                                                                IF "Account Type" = "Account Type"::"Bank Account" THEN
                                                                  IF CompanyBank.GET("Account No.") THEN
                                                                    IF CompanyBank."Currency Code" <> '' THEN
                                                                      ERROR(Text008,CompanyBank."Currency Code");

                                                                IF CurrFieldNo <> FIELDNO("Currency Code") THEN
                                                                  UpdateCurrencyFactor
                                                                ELSE
                                                                  IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                    PaymentLine.SETRANGE("No.","No.");
                                                                    IF PaymentLine.FINDFIRST THEN
                                                                      ERROR(Text002);
                                                                    UpdateCurrencyFactor;
                                                                  END ELSE
                                                                    IF "Currency Code" <> '' THEN BEGIN
                                                                      UpdateCurrencyFactor;
                                                                      IF "Currency Factor" <> xRec."Currency Factor" THEN
                                                                        ConfirmUpdateCurrencyFactor;
                                                                    END;
                                                                IF "Currency Code" <> xRec."Currency Code" THEN BEGIN
                                                                  PaymentLine.INIT;
                                                                  PaymentLine.SETRANGE("No.","No.");
                                                                  PaymentLine.MODIFYALL("Currency Code","Currency Code");
                                                                  PaymentLine.MODIFYALL("Currency Factor","Currency Factor");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Currency Code;
                                                              FRA=Code devise] }
    { 3   ;   ;Currency Factor     ;Decimal       ;OnValidate=VAR
                                                                PaymentLine@1120000 : Record 10866;
                                                              BEGIN
                                                                PaymentLine.SETRANGE("No.","No.");
                                                                IF PaymentLine.FINDSET THEN
                                                                  REPEAT
                                                                    PaymentLine."Currency Factor" := "Currency Factor";
                                                                    PaymentLine.VALIDATE(Amount);
                                                                    PaymentLine.MODIFY;
                                                                  UNTIL PaymentLine.NEXT = 0;
                                                              END;

                                                   CaptionML=[ENU=Currency Factor;
                                                              FRA=Facteur devise];
                                                   DecimalPlaces=0:15 }
    { 4   ;   ;Posting Date        ;Date          ;OnValidate=VAR
                                                                PaymentLine@1120000 : Record 10866;
                                                              BEGIN
                                                                IF "Posting Date" <> xRec."Posting Date" THEN BEGIN
                                                                  PaymentLine.RESET;
                                                                  PaymentLine.SETRANGE("No.","No.");
                                                                  PaymentLine.MODIFYALL("Posting Date","Posting Date");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Posting Date;
                                                              FRA=Date comptabilisation] }
    { 5   ;   ;Document Date       ;Date          ;OnValidate=VAR
                                                                PaymentLine@1120000 : Record 10866;
                                                              BEGIN
                                                                IF "Document Date" <> xRec."Document Date" THEN BEGIN
                                                                  PaymentLine.RESET;
                                                                  PaymentLine.SETRANGE("No.","No.");
                                                                  IF PaymentLine.FINDSET THEN
                                                                    REPEAT
                                                                      PaymentLine.UpdateDueDate("Document Date");
                                                                    UNTIL PaymentLine.NEXT = 0;
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Document Date;
                                                              FRA=Date document] }
    { 6   ;   ;Payment Class       ;Text30        ;TableRelation="Payment Class";
                                                   OnValidate=BEGIN
                                                                VALIDATE("Status No.");
                                                              END;

                                                   CaptionML=[ENU=Payment Class;
                                                              FRA=Type de rŠglement] }
    { 7   ;   ;Status No.          ;Integer       ;TableRelation="Payment Status".Line WHERE (Payment Class=FIELD(Payment Class));
                                                   OnValidate=VAR
                                                                PaymentStep@1120000 : Record 10862;
                                                                PaymentStatus@1120001 : Record 10861;
                                                              BEGIN
                                                                PaymentStep.SETRANGE("Payment Class","Payment Class");
                                                                PaymentStep.SETFILTER("Next Status",'>%1',"Status No.");
                                                                PaymentStep.SETRANGE("Action Type",PaymentStep."Action Type"::Ledger);
                                                                IF PaymentStep.FINDFIRST THEN
                                                                  "Source Code" := PaymentStep."Source Code";
                                                                PaymentStatus.GET("Payment Class","Status No.");
                                                                "Archiving Authorized" := PaymentStatus."Archiving Authorized";
                                                              END;

                                                   CaptionML=[ENU=Status No.;
                                                              FRA=Nø statut] }
    { 8   ;   ;Status Name         ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Payment Status".Name WHERE (Payment Class=FIELD(Payment Class),
                                                                                                   Line=FIELD(Status No.)));
                                                   CaptionML=[ENU=Status Name;
                                                              FRA=Nom statut];
                                                   Editable=No }
    { 9   ;   ;Shortcut Dimension 1 Code;Code20   ;OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                                MODIFY;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                              VALIDATE("Shortcut Dimension 1 Code");
                                                            END;

                                                   CaptionML=[ENU=Shortcut Dimension 1 Code;
                                                              FRA=Code raccourci axe 1];
                                                   CaptionClass='1,2,1' }
    { 10  ;   ;Shortcut Dimension 2 Code;Code20   ;OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                                MODIFY;
                                                              END;

                                                   OnLookup=BEGIN
                                                              LookupShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                              VALIDATE("Shortcut Dimension 2 Code");
                                                            END;

                                                   CaptionML=[ENU=Shortcut Dimension 2 Code;
                                                              FRA=Code raccourci axe 2];
                                                   CaptionClass='1,2,2' }
    { 11  ;   ;Payment Class Name  ;Text50        ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Payment Class".Name WHERE (Code=FIELD(Payment Class)));
                                                   CaptionML=[ENU=Payment Class Name;
                                                              FRA=Nom type de rŠglement];
                                                   Editable=No }
    { 12  ;   ;No. Series          ;Code10        ;CaptionML=[ENU=No. Series;
                                                              FRA=Souches de nø] }
    { 13  ;   ;Source Code         ;Code10        ;TableRelation="Source Code";
                                                   CaptionML=[ENU=Source Code;
                                                              FRA=Code journal] }
    { 14  ;   ;Account Type        ;Option        ;OnValidate=BEGIN
                                                                IF "Account Type" <> xRec."Account Type" THEN BEGIN
                                                                  VALIDATE("Account No.",'');
                                                                  "Dimension Set ID" := 0;
                                                                  DimManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code",
                                                                    "Shortcut Dimension 2 Code");
                                                                END;
                                                              END;

                                                   CaptionML=[ENU=Account Type;
                                                              FRA=Type compte];
                                                   OptionCaptionML=[ENU=G/L Account,Customer,Vendor,Bank Account,Fixed Asset;
                                                                    FRA=G‚n‚ral,Client,Fournisseur,Banque,Immobilisation];
                                                   OptionString=G/L Account,Customer,Vendor,Bank Account,Fixed Asset }
    { 15  ;   ;Account No.         ;Code20        ;TableRelation=IF (Account Type=CONST(G/L Account)) "G/L Account"
                                                                 ELSE IF (Account Type=CONST(Customer)) Customer
                                                                 ELSE IF (Account Type=CONST(Vendor)) Vendor
                                                                 ELSE IF (Account Type=CONST(Bank Account)) "Bank Account"
                                                                 ELSE IF (Account Type=CONST(Fixed Asset)) "Fixed Asset";
                                                   OnValidate=BEGIN
                                                                IF "Account No." <> xRec."Account No." THEN BEGIN
                                                                  "Dimension Set ID" := 0;
                                                                  DimManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code",
                                                                    "Shortcut Dimension 2 Code");
                                                                  IF "Account No." <> '' THEN
                                                                    DimensionSetup;
                                                                END;
                                                                IF "Account Type" = "Account Type"::"Bank Account" THEN BEGIN
                                                                  IF CompanyBank.GET("Account No.") THEN BEGIN
                                                                    IF "Currency Code" = '' THEN
                                                                      IF CompanyBank."Currency Code" <> '' THEN
                                                                        ERROR(Text006);
                                                                    IF "Currency Code" <> '' THEN
                                                                      IF (CompanyBank."Currency Code" <> "Currency Code") AND (CompanyBank."Currency Code" <> '') THEN
                                                                        ERROR(Text007,"Currency Code");
                                                                    "Bank Branch No." := CompanyBank."Bank Branch No.";
                                                                    "Bank Account No." := CompanyBank."Bank Account No.";
                                                                    IBAN := CompanyBank.IBAN;
                                                                    "SWIFT Code" := CompanyBank."SWIFT Code";
                                                                    "Bank Country/Region Code" := CompanyBank."Country/Region Code";
                                                                    "Agency Code" := CompanyBank."Agency Code";
                                                                    "RIB Key" := CompanyBank."RIB Key";
                                                                    "RIB Checked" := CompanyBank."RIB Checked";
                                                                    "Bank Name" := CompanyBank.Name;
                                                                    "Bank Post Code" := CompanyBank."Post Code";
                                                                    "Bank City" := CompanyBank.City;
                                                                    "Bank Name 2" := CompanyBank."Name 2";
                                                                    "Bank Address" := CompanyBank.Address;
                                                                    "Bank Address 2" := CompanyBank."Address 2";
                                                                    "National Issuer No." := CompanyBank."National Issuer No.";
                                                                  END ELSE
                                                                    InitBankAccount;
                                                                END ELSE
                                                                  InitBankAccount;
                                                              END;

                                                   CaptionML=[ENU=Account No.;
                                                              FRA=Nø compte] }
    { 16  ;   ;Amount (LCY)        ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Payment Line"."Amount (LCY)" WHERE (No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount (LCY);
                                                              FRA=Montant DS];
                                                   Editable=No }
    { 17  ;   ;Amount              ;Decimal       ;FieldClass=FlowField;
                                                   CalcFormula=Sum("Payment Line".Amount WHERE (No.=FIELD(No.)));
                                                   CaptionML=[ENU=Amount;
                                                              FRA=Montant];
                                                   Editable=No }
    { 18  ;   ;Bank Branch No.     ;Text20        ;OnValidate=BEGIN
                                                                "RIB Checked" := RibKey.Check("Bank Branch No.","Agency Code","Bank Account No.","RIB Key");
                                                              END;

                                                   CaptionML=[ENU=Bank Branch No.;
                                                              FRA=Code ‚tablissement] }
    { 19  ;   ;Bank Account No.    ;Text30        ;OnValidate=BEGIN
                                                                "RIB Checked" := RibKey.Check("Bank Branch No.","Agency Code","Bank Account No.","RIB Key");
                                                              END;

                                                   CaptionML=[ENU=Bank Account No.;
                                                              FRA=Nø compte bancaire] }
    { 20  ;   ;Agency Code         ;Text20        ;OnValidate=BEGIN
                                                                "RIB Checked" := RibKey.Check("Bank Branch No.","Agency Code","Bank Account No.","RIB Key");
                                                              END;

                                                   CaptionML=[ENU=Agency Code;
                                                              FRA=Code agence] }
    { 21  ;   ;RIB Key             ;Integer       ;OnValidate=BEGIN
                                                                "RIB Checked" := RibKey.Check("Bank Branch No.","Agency Code","Bank Account No.","RIB Key");
                                                              END;

                                                   CaptionML=[ENU=RIB Key;
                                                              FRA=Cl‚ RIB] }
    { 22  ;   ;RIB Checked         ;Boolean       ;CaptionML=[ENU=RIB Checked;
                                                              FRA=V‚rification RIB];
                                                   Editable=No }
    { 23  ;   ;Bank Name           ;Text50        ;CaptionML=[ENU=Bank Name;
                                                              FRA=Nom de la banque] }
    { 24  ;   ;Bank Post Code      ;Code20        ;TableRelation=IF (Bank Country/Region Code=CONST()) "Post Code"
                                                                 ELSE IF (Bank Country/Region Code=FILTER(<>'')) "Post Code" WHERE (Country/Region Code=FIELD(Bank Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Bank City","Bank Post Code","Bank County","Bank Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bank Post Code;
                                                              FRA=Code postal banque] }
    { 25  ;   ;Bank City           ;Text30        ;TableRelation=IF (Bank Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Bank Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Bank Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Bank City","Bank Post Code","Bank County","Bank Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=[ENU=Bank City;
                                                              FRA=Ville banque] }
    { 26  ;   ;Bank Name 2         ;Text50        ;CaptionML=[ENU=Bank Name 2;
                                                              FRA=Nom 2 banque] }
    { 27  ;   ;Bank Address        ;Text50        ;CaptionML=[ENU=Bank Address;
                                                              FRA=Adresse banque] }
    { 28  ;   ;Bank Address 2      ;Text50        ;CaptionML=[ENU=Bank Address 2;
                                                              FRA=Adresse banque (2Šme ligne)] }
    { 29  ;   ;Bank Contact        ;Text50        ;CaptionML=[ENU=Bank Contact;
                                                              FRA=Contact banque] }
    { 30  ;   ;Bank County         ;Text30        ;CaptionML=[ENU=Bank County;
                                                              FRA=R‚gion banque] }
    { 31  ;   ;Bank Country/Region Code;Code10    ;TableRelation=Country/Region;
                                                   CaptionML=[ENU=Bank Country/Region Code;
                                                              FRA=Code pays/r‚gion banque] }
    { 32  ;   ;National Issuer No. ;Code6         ;CaptionML=[ENU=National Issuer No.;
                                                              FRA=Nø ‚metteur national];
                                                   Numeric=Yes }
    { 40  ;   ;File Export Completed;Boolean      ;CaptionML=[ENU=File Export Completed;
                                                              FRA=Exportation du fichier termin‚e];
                                                   Editable=No }
    { 41  ;   ;No. of Lines        ;Integer       ;FieldClass=FlowField;
                                                   CalcFormula=Count("Payment Line" WHERE (No.=FIELD(No.)));
                                                   CaptionML=[ENU=No. of Lines;
                                                              FRA=Nbre de lignes];
                                                   Editable=No }
    { 42  ;   ;No. of Unposted Lines;Integer      ;FieldClass=FlowField;
                                                   CalcFormula=Count("Payment Line" WHERE (No.=FIELD(No.),
                                                                                           Posted=CONST(No)));
                                                   CaptionML=[ENU=No. of Unposted Lines;
                                                              FRA=Nombre de lignes non valid‚es];
                                                   Editable=No }
    { 43  ;   ;Archiving Authorized;Boolean       ;FieldClass=FlowField;
                                                   CalcFormula=Lookup("Payment Status"."Archiving Authorized" WHERE (Payment Class=FIELD(Payment Class),
                                                                                                                     Line=FIELD(Status No.)));
                                                   CaptionML=[ENU=Archiving Authorized;
                                                              FRA=Archivage autoris‚];
                                                   Editable=No }
    { 50  ;   ;IBAN                ;Code50        ;OnValidate=VAR
                                                                CompanyInfo@1120000 : Record 79;
                                                              BEGIN
                                                                CompanyInfo.CheckIBAN(IBAN);
                                                              END;

                                                   CaptionML=[ENU=IBAN;
                                                              FRA=Nø compte bancaire international] }
    { 51  ;   ;SWIFT Code          ;Code20        ;CaptionML=[ENU=SWIFT Code;
                                                              FRA=Code SWIFT] }
    { 132 ;   ;Partner Type        ;Option        ;CaptionML=[ENU=Partner Type;
                                                              FRA=Type partenaire];
                                                   OptionCaptionML=[ENU=" ,Company,Person";
                                                                    FRA=" ,Soci‚t‚,Personne"];
                                                   OptionString=[ ,Company,Person] }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnLookup=BEGIN
                                                              ShowDocDim;
                                                            END;

                                                   CaptionML=[ENU=Dimension Set ID;
                                                              FRA=ID ensemble de dimensions];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;No.                                     ;Clustered=Yes }
    {    ;Posting Date                             }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;No.                                      }
  }
  CODE
  {
    VAR
      Text000@1120000 : TextConst 'ENU=Deleting the line is not allowed.;FRA=Vous n''avez pas le droit de supprimer la ligne.';
      Text001@1120001 : TextConst 'ENU=There is no line to treat.;FRA=Il n''y aucune ligne … traiter.';
      Text002@1120002 : TextConst 'ENU=You cannot modify Currency Code because the Payment Header contains lines.;FRA=Impossible de modifier le code devise sur un bordereau contenant des lignes.';
      Process@1120012 : Record 10860;
      ReglHeader@1120011 : Record 10865;
      GetProcess@1120009 : Record 10860;
      CurrExchRate@1120008 : Record 330;
      CompanyBank@1120007 : Record 270;
      PostCode@1120005 : Record 225;
      DimManagement@1120004 : Codeunit 408;
      NoSeriesMgt@1120006 : Codeunit 396;
      RibKey@1120015 : Codeunit 10801;
      Text006@1120021 : TextConst 'ENU=The currency code for the document is the LCY Code.\\Please select a bank for which the currency code is the LCY Code.;FRA=Le code devise du document est la devise soci‚t‚.\\S‚lectionnez une banque dont le code devise est la devise soci‚t‚.';
      Text007@1120022 : TextConst 'ENU=The currency code for the document is %1.\\Please select a bank for which the currency code is %1 or the LCY Code.;FRA=Le code devise du document est %1.\\S‚lectionnez une banque dont le code devise est %1 ou la devise soci‚t‚.';
      Text008@1120023 : TextConst 'ENU=Your bank''s currency code is %1.\\You must change the bank account code before modifying the currency code.;FRA=La devise de votre banque est %1.\\Vous devez changer de code banque avant de modifier le code devise.';
      Text009@1120024 : TextConst 'ENU=You may have changed a dimension.\\Do you want to update the lines?;FRA=Vous avez probablement modifi‚ un axe analytique.\\Souhaitez-vous mettre … jour les lignesÿ?';
      CurrencyDate@1120010 : Date;

    PROCEDURE LookupShortcutDimCode@1120004(FieldNo@1120000 : Integer;VAR ShortcutDimCode@1120001 : Code[20]);
    BEGIN
      DimManagement.LookupDimValueCode(FieldNo,ShortcutDimCode);
      DimManagement.ValidateShortcutDimValues(FieldNo,ShortcutDimCode,"Dimension Set ID");
    END;

    PROCEDURE ValidateShortcutDimCode@1120003(FieldNo@1120000 : Integer;VAR ShortcutDimCode@1120001 : Code[20]);
    BEGIN
      DimManagement.ValidateShortcutDimValues(FieldNo,ShortcutDimCode,"Dimension Set ID");
      IF xRec."Dimension Set ID" <> "Dimension Set ID" THEN
        IF PaymentLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",xRec."Dimension Set ID");
    END;

    PROCEDURE AssistEdit@1120002(OldReglHeader@1120000 : Record 10865) : Boolean;
    BEGIN
      WITH ReglHeader DO BEGIN
        ReglHeader := Rec;
        Process := GetProcess;

        Process.TESTFIELD("Header No. Series");
        IF NoSeriesMgt.SelectSeries(Process."Header No. Series",OldReglHeader."No. Series","No. Series") THEN BEGIN
          Process := GetProcess;

          Process.TESTFIELD("Header No. Series");
          NoSeriesMgt.SetSeries("No.");
          Rec := ReglHeader;
          EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE UpdateCurrencyFactor@1120001();
    BEGIN
      IF "Currency Code" <> '' THEN BEGIN
        CurrencyDate := WORKDATE;
        "Currency Factor" := CurrExchRate.ExchangeRate(CurrencyDate,"Currency Code");
      END ELSE
        "Currency Factor" := 1;
    END;

    LOCAL PROCEDURE ConfirmUpdateCurrencyFactor@1120000();
    BEGIN
      "Currency Factor" := xRec."Currency Factor";
    END;

    PROCEDURE InitBankAccount@1120005();
    BEGIN
      "Bank Branch No." := '';
      "Bank Account No." := '';
      IBAN := '';
      "SWIFT Code" := '';
      "Agency Code" := '';
      "RIB Key" := 0;
      "RIB Checked" := FALSE;
      "Bank Name" := '';
      "Bank Post Code" := '';
      "Bank City" := '';
      "Bank Name 2" := '';
      "Bank Address" := '';
      "Bank Address 2" := '';
      "Bank Contact" := '';
      "Bank County" := '';
      "Bank Country/Region Code" := '';
      "National Issuer No." := '';
    END;

    PROCEDURE TestNbOfLines@1120006();
    BEGIN
      CALCFIELDS("No. of Lines");
      IF "No. of Lines" = 0 THEN
        ERROR(Text001);
    END;

    PROCEDURE InitHeader@1120007();
    BEGIN
      "Posting Date" := WORKDATE;
      "Document Date" := WORKDATE;
      VALIDATE("Account Type","Account Type"::"Bank Account");
    END;

    PROCEDURE DimensionSetup@1120010();
    BEGIN
      DimensionCreate;
    END;

    PROCEDURE DimensionCreate@1120009();
    VAR
      TableID@1120002 : ARRAY [10] OF Integer;
      No@1120001 : ARRAY [10] OF Code[20];
      OldDimSetID@1120000 : Integer;
    BEGIN
      TableID[1] := DimManagement.TypeToTableID1("Account Type");
      No[1] := "Account No.";
      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      OldDimSetID := "Dimension Set ID";

      "Dimension Set ID" :=
        DimManagement.GetDefaultDimID(TableID,No,"Source Code","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code",0,0);

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF PaymentLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    PROCEDURE ShowDocDim@1120012();
    VAR
      OldDimSetID@1120000 : Integer;
    BEGIN
      OldDimSetID := "Dimension Set ID";
      "Dimension Set ID" :=
        DimManagement.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2','Payment: ',"No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");

      IF OldDimSetID <> "Dimension Set ID" THEN BEGIN
        MODIFY;
        IF PaymentLinesExist THEN
          UpdateAllLineDim("Dimension Set ID",OldDimSetID);
      END;
    END;

    PROCEDURE PaymentLinesExist@1120013() : Boolean;
    VAR
      PaymentLine@1120000 : Record 10866;
    BEGIN
      PaymentLine.RESET;
      PaymentLine.SETRANGE("No.","No.");
      EXIT(PaymentLine.FINDFIRST);
    END;

    LOCAL PROCEDURE UpdateAllLineDim@34(NewParentDimSetID@1000 : Integer;OldParentDimSetID@1001 : Integer);
    VAR
      PaymentLine@1120000 : Record 10866;
      NewDimSetID@1002 : Integer;
    BEGIN
      // Update all lines with changed dimensions.

      IF NewParentDimSetID = OldParentDimSetID THEN
        EXIT;
      IF NOT CONFIRM(Text009) THEN
        EXIT;

      PaymentLine.RESET;
      PaymentLine.SETRANGE("No.","No.");
      PaymentLine.LOCKTABLE;
      IF PaymentLine.FIND('-') THEN
        REPEAT
          NewDimSetID := DimManagement.GetDeltaDimSetID(PaymentLine."Dimension Set ID",NewParentDimSetID,OldParentDimSetID);
          IF PaymentLine."Dimension Set ID" <> NewDimSetID THEN BEGIN
            PaymentLine."Dimension Set ID" := NewDimSetID;
            PaymentLine.MODIFY;
          END;
        UNTIL PaymentLine.NEXT = 0;
    END;

    BEGIN
    END.
  }
}


OBJECT Codeunit 1287 Exp. Bank Conv. Ext. Data Hndl
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    TableNo=1220;
    Permissions=TableData 1220=rimd,
                TableData 1260=r,
                TableData 1261=r;
    OnRun=VAR
            TempPaymentFileTempBlob@1000 : TEMPORARY Record 99008535;
            FileMgt@1001 : Codeunit 419;
          BEGIN
            ConvertPaymentDataToFormat(TempPaymentFileTempBlob,Rec);

            IF FileMgt.BLOBExport(TempPaymentFileTempBlob,"Data Exch. Def Code" + TxtExtTok,TRUE) = '' THEN
              ERROR(DownloadFromStreamErr);

            GET("Entry No.");
            "File Content" := TempPaymentFileTempBlob.Blob;
            MODIFY;
          END;

  }
  CODE
  {
    VAR
      BodyContentErr@1007 : TextConst '@@@="%1=XmlTag";ENU=The %1 XML tag was not found, or was found more than once in the body content of the SOAP request.;FRA=La balise XML %1 est introuvable ou est pr‚sente plusieurs fois dans le contenu du corps de la demande SOAP.';
      DownloadFromStreamErr@1000 : TextConst 'ENU=The file has not been saved.;FRA=Le fichier n''a pas ‚t‚ enregistr‚.';
      NoRequestBodyErr@1005 : TextConst 'ENU=The request body is not set.;FRA=Le corps de la demande n''est pas d‚fini.';
      NothingToExportErr@1002 : TextConst 'ENU=There is nothing to export.;FRA=Il n''y a rien … exporter.';
      PaymentDataNotCollectedErr@1004 : TextConst 'ENU=The bank data conversion service has not returned any payment data.\\For more information, go to %1.;FRA=Le service conversion donn‚es bancaires n''a renvoy‚ aucune donn‚e de paiement.\\Pour plus d''informations, consultez %1.';
      ResponseNodeTxt@1012 : TextConst '@@@={Locked};ENU=paymentExportBankResponse;FRA=paymentExportBankResponse';
      HasErrorsErr@1013 : TextConst 'ENU=The bank data conversion service has found one or more errors.\\For each line to be exported, resolve the errors that are displayed in the FactBox.\\Choose an error to see more information.;FRA=Le service conversion donn‚es bancaires a rencontr‚ une ou plusieurs erreurs.\\Pour chacune des lignes … exporter, corrigez les erreurs affich‚es dans le r‚capitulatif.\\S‚lectionnez une erreur pour afficher plus d''informations … son sujet.';
      IncorrectElementErr@1014 : TextConst 'ENU=There is an incorrect file conversion error element in the response. Reference: %1, error text: %2.;FRA=La r‚ponse contient un ‚l‚ment d''erreur de conversion de fichier incorrect. R‚f‚renceÿ: %1, texte de l''erreurÿ: %2.';
      BankDataConvServSysErr@1001 : TextConst 'ENU=The bank data conversion service has returned the following error message:;FRA=Le service conversion donn‚es bancaires a renvoy‚ le message d''erreur suivantÿ:';
      AddnlInfoTxt@1008 : TextConst 'ENU=For more information, go to %1.;FRA=Pour plus d''informations, consultez %1.';
      BankDataConvServMgt@1003 : Codeunit 1265;
      TxtExtTok@1006 : TextConst '@@@={Locked};ENU=.txt;FRA=.txt';

    PROCEDURE ConvertPaymentDataToFormat@9(VAR TempPaymentFileTempBlob@1002 : TEMPORARY Record 99008535;DataExch@1000 : Record 1220);
    VAR
      TempRequestBodyTempBlob@1001 : TEMPORARY Record 99008535;
    BEGIN
      IF NOT DataExch."File Content".HASVALUE THEN
        ERROR(NoRequestBodyErr);

      TempRequestBodyTempBlob.INIT;
      TempRequestBodyTempBlob.Blob := DataExch."File Content";

      SendDataToConversionService(TempPaymentFileTempBlob,TempRequestBodyTempBlob,DataExch."Entry No.");

      IF NOT TempPaymentFileTempBlob.Blob.HASVALUE THEN
        ERROR(NothingToExportErr);
    END;

    LOCAL PROCEDURE SendDataToConversionService@1(VAR TempPaymentFileTempBlob@1003 : TEMPORARY Record 99008535;VAR TempBodyTempBlob@1004 : TEMPORARY Record 99008535;DataExchEntryNo@1007 : Integer);
    VAR
      BankDataConvServiceSetup@1006 : Record 1260;
      SOAPWebServiceRequestMgt@1001 : Codeunit 1290;
      BodyInStream@1005 : InStream;
      ResponseInStream@1002 : InStream;
    BEGIN
      BankDataConvServMgt.CheckCredentials;

      PrepareSOAPRequestBody(TempBodyTempBlob);

      TempBodyTempBlob.Blob.CREATEINSTREAM(BodyInStream);

      BankDataConvServiceSetup.GET;

      SOAPWebServiceRequestMgt.SetGlobals(BodyInStream,
        BankDataConvServiceSetup."Service URL",BankDataConvServiceSetup."User Name",BankDataConvServiceSetup.GetPassword);

      IF NOT SOAPWebServiceRequestMgt.SendRequestToWebService THEN
        SOAPWebServiceRequestMgt.ProcessFaultResponse(STRSUBSTNO(AddnlInfoTxt,BankDataConvServiceSetup."Support URL"));

      SOAPWebServiceRequestMgt.GetResponseContent(ResponseInStream);

      CheckIfErrorsOccurred(ResponseInStream,DataExchEntryNo);

      ReadContentFromResponse(TempPaymentFileTempBlob,ResponseInStream);
    END;

    LOCAL PROCEDURE PrepareSOAPRequestBody@12(VAR TempBodyTempBlob@1000 : TEMPORARY Record 99008535);
    VAR
      BodyContentInputStream@1004 : InStream;
      BodyContentOutputStream@1005 : OutStream;
      BodyContentXmlDoc@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      TempBodyTempBlob.Blob.CREATEINSTREAM(BodyContentInputStream);
      BodyContentXmlDoc := BodyContentXmlDoc.XmlDocument;
      BodyContentXmlDoc.Load(BodyContentInputStream);

      AddNamespaceAttribute(BodyContentXmlDoc,'amcpaymentreq');
      AddNamespaceAttribute(BodyContentXmlDoc,'bank');
      AddNamespaceAttribute(BodyContentXmlDoc,'language');

      CLEAR(TempBodyTempBlob.Blob);
      TempBodyTempBlob.Blob.CREATEOUTSTREAM(BodyContentOutputStream);
      BodyContentXmlDoc.Save(BodyContentOutputStream);
    END;

    LOCAL PROCEDURE AddNamespaceAttribute@6(VAR XmlDoc@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";ElementTag@1001 : Text);
    VAR
      XMLDOMMgt@1003 : Codeunit 6224;
      XmlNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNodeList@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
    BEGIN
      XMLNodeList := XmlDoc.GetElementsByTagName(ElementTag);
      IF XMLNodeList.Count <> 1 THEN
        ERROR(BodyContentErr,ElementTag);

      XmlNode := XMLNodeList.Item(0);
      IF ISNULL(XmlNode) THEN
        ERROR(BodyContentErr,ElementTag);
      XMLDOMMgt.AddAttribute(XmlNode,'xmlns','');
    END;

    LOCAL PROCEDURE CheckIfErrorsOccurred@8(VAR ResponseInStream@1001 : InStream;DataExchEntryNo@1002 : Integer);
    VAR
      ResponseXmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      ResponseXmlDoc := ResponseXmlDoc.XmlDocument;
      ResponseXmlDoc.Load(ResponseInStream);

      IF ResponseHasErrors(ResponseXmlDoc) THEN
        DisplayErrorFromResponse(ResponseXmlDoc,DataExchEntryNo);
    END;

    LOCAL PROCEDURE ResponseHasErrors@3(ResponseXmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument") : Boolean;
    VAR
      XMLDOMMgt@1001 : Codeunit 6224;
      XmlNode@1002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      EXIT(XMLDOMMgt.FindNodeWithNamespace(ResponseXmlDoc.DocumentElement,
          BankDataConvServMgt.GetHeaderErrXPath(ResponseNodeTxt),'amc',BankDataConvServMgt.GetNamespace,XmlNode));
    END;

    LOCAL PROCEDURE DisplayErrorFromResponse@5(ResponseXmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";DataExchEntryNo@1006 : Integer);
    VAR
      GenJnlLine@1007 : Record 81;
      XMLDOMMgt@1003 : Codeunit 6224;
      XMLNodeList@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      Found@1002 : Boolean;
      ErrorText@1005 : Text;
      i@1004 : Integer;
    BEGIN
      Found := XMLDOMMgt.FindNodesWithNamespace(ResponseXmlDoc.DocumentElement,
          BankDataConvServMgt.GetConvErrXPath(ResponseNodeTxt),'amc',BankDataConvServMgt.GetNamespace,XMLNodeList);
      IF Found THEN BEGIN
        FOR i := 1 TO XMLNodeList.Count DO
          InsertPaymentFileError(XMLNodeList.Item(i - 1),DataExchEntryNo);

        GenJnlLine.SETRANGE("Data Exch. Entry No.",DataExchEntryNo);
        GenJnlLine.FINDFIRST;
        IF GenJnlLine.HasPaymentFileErrorsInBatch THEN BEGIN
          COMMIT;
          ERROR(HasErrorsErr);
        END;
      END;

      Found := XMLDOMMgt.FindNodesWithNamespace(ResponseXmlDoc.DocumentElement,
          BankDataConvServMgt.GetErrorXPath(ResponseNodeTxt),'amc',BankDataConvServMgt.GetNamespace,XMLNodeList);

      IF Found THEN BEGIN
        ErrorText := BankDataConvServSysErr;
        FOR i := 1 TO XMLNodeList.Count DO
          ErrorText += '\\' + XMLDOMMgt.FindNodeText(XMLNodeList.Item(i - 1),'text') + '\' +
            XMLDOMMgt.FindNodeText(XMLNodeList.Item(i - 1),'hinttext') + '\\' +
            STRSUBSTNO(AddnlInfoTxt,BankDataConvServMgt.GetSupportURL(XMLNodeList.Item(i - 1)));

        ERROR(ErrorText);
      END;
    END;

    LOCAL PROCEDURE InsertPaymentFileError@4(XmlNode@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";DataExchEntryNo@1004 : Integer);
    VAR
      PaymentExportData@1005 : Record 1226;
      GenJnlLine@1003 : Record 81;
      XMLDOMMgt@1007 : Codeunit 6224;
      PaymentLineId@1001 : Text;
      ErrorText@1006 : Text;
      HintText@1002 : Text;
      SupportURL@1008 : Text;
    BEGIN
      PaymentLineId := XMLDOMMgt.FindNodeText(XmlNode,'referenceid');
      ErrorText := XMLDOMMgt.FindNodeText(XmlNode,'text');
      HintText := XMLDOMMgt.FindNodeText(XmlNode,'hinttext');
      SupportURL := BankDataConvServMgt.GetSupportURL(XmlNode);

      IF (ErrorText = '') OR (PaymentLineId = '') THEN
        ERROR(IncorrectElementErr,PaymentLineId,ErrorText);

      WITH PaymentExportData DO BEGIN
        SETRANGE("Data Exch Entry No.",DataExchEntryNo);
        SETRANGE("End-to-End ID",PaymentLineId);
        IF FINDFIRST THEN BEGIN
          GenJnlLine.GET("General Journal Template","General Journal Batch Name","General Journal Line No.");
          GenJnlLine.InsertPaymentFileErrorWithDetails(ErrorText,HintText,SupportURL);
        END ELSE BEGIN
          SETRANGE("End-to-End ID");
          SETRANGE("Payment Information ID",PaymentLineId);
          IF NOT FINDFIRST THEN
            ERROR(IncorrectElementErr,PaymentLineId,ErrorText);
          GenJnlLine.GET("General Journal Template","General Journal Batch Name","General Journal Line No.");
          GenJnlLine.InsertPaymentFileErrorWithDetails(ErrorText,HintText,SupportURL);
        END;
      END;
    END;

    LOCAL PROCEDURE ReadContentFromResponse@2(VAR TempPaymentFileTempBlob@1001 : TEMPORARY Record 99008535;ResponseInStream@1002 : InStream);
    VAR
      XMLDOMMgt@1005 : Codeunit 6224;
      DataXmlNode@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ResponseXmlDoc@1000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Found@1006 : Boolean;
    BEGIN
      ResponseXmlDoc := ResponseXmlDoc.XmlDocument;
      ResponseXmlDoc.Load(ResponseInStream);

      Found := XMLDOMMgt.FindNodeWithNamespace(ResponseXmlDoc.DocumentElement,
          BankDataConvServMgt.GetDataXPath(ResponseNodeTxt),'amc',BankDataConvServMgt.GetNamespace,DataXmlNode);
      IF NOT Found THEN
        ERROR(PaymentDataNotCollectedErr,BankDataConvServMgt.GetSupportURL(DataXmlNode));

      DecodePaymentData(TempPaymentFileTempBlob,DataXmlNode.Value);
    END;

    LOCAL PROCEDURE DecodePaymentData@10(VAR TempPaymentFileTempBlob@1000 : TEMPORARY Record 99008535;Base64String@1001 : Text);
    VAR
      FileMgt@1004 : Codeunit 419;
      Convert@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Convert";
      File@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.File";
      FileName@1005 : Text;
    BEGIN
      FileName := FileMgt.ServerTempFileName('txt');
      File.WriteAllBytes(FileName,Convert.FromBase64String(Base64String));
      FileMgt.BLOBImportFromServerFile(TempPaymentFileTempBlob,FileName);
    END;

    BEGIN
    END.
  }
}


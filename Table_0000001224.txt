OBJECT Table 1224 Data Exch. Mapping
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00;
    Version List=NAVW19.00;
  }
  PROPERTIES
  {
    OnDelete=BEGIN
               DataExchFieldMapping.SETRANGE("Data Exch. Def Code","Data Exch. Def Code");
               DataExchFieldMapping.SETRANGE("Table ID","Table ID");
               DataExchFieldMapping.DELETEALL;
             END;

    OnRename=BEGIN
               IF HasFieldMappings THEN
                 ERROR(RenameErr);
             END;

    CaptionML=[ENU=Data Exch. Mapping;
               FRA=Correspondance ‚chge donn‚es];
  }
  FIELDS
  {
    { 1   ;   ;Data Exch. Def Code ;Code20        ;TableRelation="Data Exch. Def";
                                                   CaptionML=[ENU=Data Exch. Def Code;
                                                              FRA=Code d‚f. ‚chge donn‚es];
                                                   NotBlank=Yes }
    { 2   ;   ;Table ID            ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Table));
                                                   CaptionML=[ENU=Table ID;
                                                              FRA=ID table];
                                                   NotBlank=Yes }
    { 3   ;   ;Name                ;Text50        ;CaptionML=[ENU=Name;
                                                              FRA=Nom] }
    { 4   ;   ;Mapping Codeunit    ;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Mapping Codeunit;
                                                              FRA=Correspondance Codeunit] }
    { 6   ;   ;Data Exch. No. Field ID;Integer    ;TableRelation=Field.No. WHERE (TableNo=FIELD(Table ID));
                                                   CaptionML=[ENU=Data Exch. No. Field ID;
                                                              FRA=ID champ nø ‚chge donn‚es];
                                                   Description=The ID of the field in the target table that contains the Data Exchange No.. }
    { 7   ;   ;Data Exch. Line Field ID;Integer   ;TableRelation=Field.No. WHERE (TableNo=FIELD(Table ID));
                                                   CaptionML=[ENU=Data Exch. Line Field ID;
                                                              FRA=ID champ Ligne ‚chge donn‚es];
                                                   Description=The ID of the field in the target table that contains the Data Exchange Line No.. }
    { 8   ;   ;Data Exch. Line Def Code;Code20    ;TableRelation="Data Exch. Line Def".Code WHERE (Data Exch. Def Code=FIELD(Data Exch. Def Code));
                                                   CaptionML=[ENU=Data Exch. Line Def Code;
                                                              FRA=Code d‚f. ligne ‚chge donn‚es];
                                                   NotBlank=Yes }
    { 9   ;   ;Pre-Mapping Codeunit;Integer       ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Pre-Mapping Codeunit;
                                                              FRA=Codeunit pr‚-mappage] }
    { 10  ;   ;Post-Mapping Codeunit;Integer      ;TableRelation=AllObjWithCaption."Object ID" WHERE (Object Type=CONST(Codeunit));
                                                   CaptionML=[ENU=Post-Mapping Codeunit;
                                                              FRA=Codeunit post-mappage] }
    { 20  ;   ;Use as Intermediate Table;Boolean  ;CaptionML=[ENU=Use as Intermediate Table;
                                                              FRA=Utiliser comme table interm‚diaire] }
  }
  KEYS
  {
    {    ;Data Exch. Def Code,Data Exch. Line Def Code,Table ID;
                                                   Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      DataExchFieldMapping@1000 : Record 1225;
      RecordNameFormatTok@1003 : TextConst 'ENU=%1 to %2;FRA=%1 au %2';
      RenameErr@1004 : TextConst 'ENU=You cannot rename the record if one or more field mapping lines exist.;FRA=Vous ne pouvez pas renommer l''enregistrement s''il existe une ou plusieurs lignes de correspondance de champ.';

    PROCEDURE InsertRec@1(DataExchDefCode@1002 : Code[20];DataExchLineDefCode@1006 : Code[20];TableId@1003 : Integer;Name@1001 : Text[50];MappingCodeunit@1004 : Integer;DataExchNoFieldId@1000 : Integer;DataExchLineFieldId@1005 : Integer);
    BEGIN
      INIT;
      VALIDATE("Data Exch. Def Code",DataExchDefCode);
      VALIDATE("Data Exch. Line Def Code",DataExchLineDefCode);
      VALIDATE("Table ID",TableId);
      VALIDATE(Name,Name);
      VALIDATE("Mapping Codeunit",MappingCodeunit);
      VALIDATE("Data Exch. No. Field ID",DataExchNoFieldId);
      VALIDATE("Data Exch. Line Field ID",DataExchLineFieldId);
      INSERT;
    END;

    PROCEDURE InsertRecForExport@2(DataExchDefCode@1002 : Code[20];DataExchLineDefCode@1006 : Code[20];TableId@1003 : Integer;Name@1001 : Text[50];ProcessingCodeunit@1004 : Integer);
    BEGIN
      INIT;
      VALIDATE("Data Exch. Def Code",DataExchDefCode);
      VALIDATE("Data Exch. Line Def Code",DataExchLineDefCode);
      VALIDATE("Table ID",TableId);
      VALIDATE(Name,Name);
      VALIDATE("Mapping Codeunit",ProcessingCodeunit);
      INSERT;
    END;

    PROCEDURE InsertRecForImport@3(DataExchDefCode@1002 : Code[20];DataExchLineDefCode@1006 : Code[20];TableId@1003 : Integer;Name@1001 : Text[50];DataExchNoFieldId@1000 : Integer;DataExchLineFieldId@1005 : Integer);
    BEGIN
      INIT;
      VALIDATE("Data Exch. Def Code",DataExchDefCode);
      VALIDATE("Data Exch. Line Def Code",DataExchLineDefCode);
      VALIDATE("Table ID",TableId);
      VALIDATE(Name,Name);
      VALIDATE("Data Exch. No. Field ID",DataExchNoFieldId);
      VALIDATE("Data Exch. Line Field ID",DataExchLineFieldId);
      INSERT;
    END;

    PROCEDURE CreateDataExchMapping@8(TableID@1000 : Integer;CodeunitID@1001 : Integer;DataExchNoFieldID@1002 : Integer;DataExchLineFieldID@1003 : Integer);
    BEGIN
      InsertRec("Data Exch. Def Code","Data Exch. Line Def Code",TableID,
        CreateName(TableID,"Data Exch. Def Code"),CodeunitID,DataExchNoFieldID,DataExchLineFieldID);
    END;

    LOCAL PROCEDURE CreateName@5(TableID@1000 : Integer;Code@1002 : Code[20]) : Text[50];
    VAR
      recRef@1001 : RecordRef;
    BEGIN
      recRef.OPEN(TableID);
      EXIT(STRSUBSTNO(RecordNameFormatTok,Code,recRef.CAPTION));
    END;

    LOCAL PROCEDURE HasFieldMappings@6() : Boolean;
    VAR
      DataExchFieldMapping@1000 : Record 1225;
    BEGIN
      DataExchFieldMapping.SETRANGE("Data Exch. Def Code","Data Exch. Def Code");
      DataExchFieldMapping.SETRANGE("Data Exch. Line Def Code","Data Exch. Line Def Code");
      DataExchFieldMapping.SETRANGE("Table ID",xRec."Table ID");
      DataExchFieldMapping.SETFILTER("Column No.",'<>%1',0);
      EXIT(NOT DataExchFieldMapping.ISEMPTY);
    END;

    PROCEDURE PositivePayUpdateCodeunits@4() : Boolean;
    VAR
      DataExchDef@1000 : Record 1222;
      DataExchLineDef@1001 : Record 1227;
    BEGIN
      DataExchDef.SETRANGE(Code,"Data Exch. Def Code");
      IF DataExchDef.FINDFIRST THEN
        IF DataExchDef.Type = DataExchDef.Type::"Positive Pay Export" THEN BEGIN
          DataExchLineDef.SETRANGE("Data Exch. Def Code","Data Exch. Def Code");
          DataExchLineDef.SETRANGE(Code,"Data Exch. Line Def Code");
          IF DataExchLineDef.FINDFIRST THEN BEGIN
            CASE DataExchLineDef."Line Type" OF
              DataExchLineDef."Line Type"::Header:
                BEGIN
                  "Pre-Mapping Codeunit" := CODEUNIT::"Exp. Pre-Mapping Head Pos. Pay";
                  "Mapping Codeunit" := CODEUNIT::"Exp. Mapping Head Pos. Pay";
                END;
              DataExchLineDef."Line Type"::Detail:
                BEGIN
                  "Pre-Mapping Codeunit" := CODEUNIT::"Exp. Pre-Mapping Det Pos. Pay";
                  "Mapping Codeunit" := CODEUNIT::"Exp. Mapping Det Pos. Pay";
                END;
              DataExchLineDef."Line Type"::Footer:
                BEGIN
                  "Pre-Mapping Codeunit" := CODEUNIT::"Exp. Pre-Mapping Foot Pos. Pay";
                  "Mapping Codeunit" := CODEUNIT::"Exp. Mapping Foot Pos. Pay";
                END;
            END;
            EXIT(TRUE);
          END;
        END;

      IF DataExchDef.Type <> DataExchDef.Type::"Positive Pay Export" THEN BEGIN
        "Pre-Mapping Codeunit" := 0;
        "Mapping Codeunit" := 0;
      END;

      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
}


OBJECT Page 1041 Copy Job Tasks
{
  OBJECT-PROPERTIES
  {
    Date=07/09/12;
    Time=12:00:00;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Copy Job Tasks;
               FRA=Copier les tÉches projet];
    PageType=StandardDialog;
    OnOpenPage=BEGIN
                 PlanningLineType := PlanningLineType::"Schedule+Contract";
                 LedgerEntryType := LedgerEntryType::"Usage+Sale";
                 ValidateSource;
               END;

    OnQueryClosePage=BEGIN
                       IF CloseAction IN [ACTION::OK,ACTION::LookupOK] THEN BEGIN
                         ValidateUserInput;
                         CopyJob.SetCopyOptions(FALSE,CopyQuantity,CopyDimensions,Source,PlanningLineType,LedgerEntryType);
                         CopyJob.SetJobTaskRange(FromJobTaskNo,ToJobTaskNo);
                         CopyJob.SetJobTaskDateRange(FromDate,ToDate);
                         CopyJob.CopyJobTasks(SourceJob,TargetJob);
                         MESSAGE(Text001);
                       END
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 15  ;1   ;Group     ;
                CaptionML=[ENU=Copy from;
                           FRA=Copier de] }

    { 11  ;2   ;Field     ;
                CaptionML=[ENU=Job No.;
                           FRA=N¯ projet];
                SourceExpr=SourceJobNo;
                TableRelation=Job;
                OnValidate=BEGIN
                             IF (SourceJobNo <> '') AND NOT SourceJob.GET(SourceJobNo) THEN
                               ERROR(Text003,SourceJob.TABLECAPTION,SourceJobNo);

                             FromJobTaskNo := '';
                             ToJobTaskNo := '';
                           END;
                            }

    { 9   ;2   ;Field     ;
                CaptionML=[ENU=Job Task No. from;
                           FRA=N¯ tÉche projet de];
                SourceExpr=FromJobTaskNo;
                OnValidate=VAR
                             JobTask@1000 : Record 1001;
                           BEGIN
                             IF (FromJobTaskNo <> '') AND NOT JobTask.GET(SourceJob."No.",FromJobTaskNo) THEN
                               ERROR(Text003,JobTask.TABLECAPTION,FromJobTaskNo);
                           END;

                OnLookup=VAR
                           JobTask@1000 : Record 1001;
                         BEGIN
                           IF SourceJob."No." <> '' THEN BEGIN
                             JobTask.SETRANGE("Job No.",SourceJob."No.");
                             IF PAGE.RUNMODAL(PAGE::"Job Task List",JobTask) = ACTION::LookupOK THEN
                               FromJobTaskNo := JobTask."Job Task No.";
                           END;
                         END;
                          }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Job Task No. to;
                           FRA=N¯ tÉche projet vers];
                SourceExpr=ToJobTaskNo;
                OnValidate=VAR
                             JobTask@1000 : Record 1001;
                           BEGIN
                             IF (ToJobTaskNo <> '') AND NOT JobTask.GET(SourceJobNo,ToJobTaskNo) THEN
                               ERROR(Text003,JobTask.TABLECAPTION,ToJobTaskNo);
                           END;

                OnLookup=VAR
                           JobTask@1000 : Record 1001;
                         BEGIN
                           IF SourceJobNo <> '' THEN BEGIN
                             JobTask.SETRANGE("Job No.",SourceJobNo);
                             IF PAGE.RUNMODAL(PAGE::"Job Task List",JobTask) = ACTION::LookupOK THEN
                               ToJobTaskNo := JobTask."Job Task No.";
                           END;
                         END;
                          }

    { 13  ;2   ;Field     ;
                Name=From Source;
                CaptionML=[ENU=Source;
                           FRA=Source];
                OptionCaptionML=[ENU=Job Planning Lines,Job Ledger Entries,None;
                                 FRA=Lignes planning projet,êcritures comptables projet,Aucun];
                SourceExpr=Source;
                OnValidate=BEGIN
                             ValidateSource;
                           END;
                            }

    { 23  ;2   ;Field     ;
                Name=Planning Line Type;
                CaptionML=[ENU=Incl. Planning Line Type;
                           FRA=Type lignes planning Ö inclure];
                OptionCaptionML=[ENU=Schedule+Contract,Schedule,Contract;
                                 FRA=PlanifiÇ+Contrat,PlanifiÇ,Contrat];
                SourceExpr=PlanningLineType;
                Enabled=PlanningLineTypeEnable }

    { 25  ;2   ;Field     ;
                Name=Ledger Entry Line Type;
                CaptionML=[ENU=Incl. Ledger Entry Line Type;
                           FRA=Inclure ligne Çcritures comptables type];
                OptionCaptionML=[ENU=Usage+Sale,Usage,Sale;
                                 FRA=Utilisation+Vente,Utilisation,Vente];
                SourceExpr=LedgerEntryType;
                Enabled=LedgerEntryLineTypeEnable }

    { 7   ;2   ;Field     ;
                CaptionML=[ENU=Starting Date;
                           FRA=Date dÇbut];
                SourceExpr=FromDate }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Ending Date;
                           FRA=Date fin];
                SourceExpr=ToDate }

    { 5   ;1   ;Group     ;
                CaptionML=[ENU=Copy to;
                           FRA=Copier vers] }

    { 3   ;2   ;Field     ;
                CaptionML=[ENU=Job No.;
                           FRA=N¯ projet];
                SourceExpr=TargetJobNo;
                TableRelation=Job;
                OnValidate=BEGIN
                             IF (TargetJobNo <> '') AND NOT TargetJob.GET(TargetJobNo) THEN
                               ERROR(Text003,TargetJob.TABLECAPTION,TargetJobNo);
                           END;
                            }

    { 6   ;1   ;Group     ;
                CaptionML=[ENU=Apply;
                           FRA=Appliquer] }

    { 26  ;2   ;Field     ;
                CaptionML=[ENU=Copy Quantity;
                           FRA=Copier quantitÇ];
                SourceExpr=CopyQuantity }

    { 28  ;2   ;Field     ;
                CaptionML=[ENU=Copy Dimensions;
                           FRA=Copier axes];
                SourceExpr=CopyDimensions }

  }
  CODE
  {
    VAR
      SourceJob@1010 : Record 167;
      TargetJob@1007 : Record 167;
      CopyJob@1013 : Codeunit 1006;
      SourceJobNo@1017 : Code[20];
      FromJobTaskNo@1009 : Code[20];
      ToJobTaskNo@1004 : Code[20];
      TargetJobNo@1008 : Code[20];
      FromDate@1006 : Date;
      ToDate@1005 : Date;
      Source@1003 : 'Job Planning Lines,Job Ledger Entries,None';
      PlanningLineType@1002 : 'Schedule+Contract,Schedule,Contract';
      LedgerEntryType@1001 : 'Usage+Sale,Usage,Sale';
      Text001@1016 : TextConst 'ENU=The job was successfully copied.;FRA=Le projet a ÇtÇ copiÇ avec succäs.';
      Text003@1018 : TextConst '@@@=Job Task 1000 does not exist.;ENU=%1 %2 does not exist.;FRA=%1 %2 n''existe pas.';
      CopyQuantity@1011 : Boolean;
      CopyDimensions@1000 : Boolean;
      PlanningLineTypeEnable@1020 : Boolean INDATASET;
      LedgerEntryLineTypeEnable@1021 : Boolean INDATASET;
      Text004@1015 : TextConst 'ENU=Provide a valid source %1.;FRA=Fournissez une source %1 valide.';
      Text005@1014 : TextConst 'ENU=Provide a valid target %1.;FRA=Fournissez un %1 cible valide.';

    LOCAL PROCEDURE ValidateUserInput@1();
    BEGIN
      IF (SourceJobNo = '') OR NOT SourceJob.GET(SourceJobNo) THEN
        ERROR(Text004,SourceJob.TABLECAPTION);

      IF (TargetJobNo = '') OR NOT TargetJob.GET(TargetJobNo) THEN
        ERROR(Text005,TargetJob.TABLECAPTION);
    END;

    LOCAL PROCEDURE ValidateSource@2();
    BEGIN
      CASE TRUE OF
        Source = Source::"Job Planning Lines":
          BEGIN
            PlanningLineTypeEnable := TRUE;
            LedgerEntryLineTypeEnable := FALSE;
          END;
        Source = Source::"Job Ledger Entries":
          BEGIN
            PlanningLineTypeEnable := FALSE;
            LedgerEntryLineTypeEnable := TRUE;
          END;
        Source = Source::None:
          BEGIN
            PlanningLineTypeEnable := FALSE;
            LedgerEntryLineTypeEnable := FALSE;
          END;
      END;
    END;

    PROCEDURE SetFromJob@3(SourceJob2@1000 : Record 167);
    BEGIN
      SourceJob := SourceJob2;
      SourceJobNo := SourceJob."No.";
    END;

    PROCEDURE SetToJob@5(TargetJob2@1000 : Record 167);
    BEGIN
      TargetJob := TargetJob2;
      TargetJobNo := TargetJob."No.";
    END;

    BEGIN
    END.
  }
}


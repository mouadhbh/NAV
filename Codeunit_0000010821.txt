OBJECT Codeunit 10821 Export DEB DTI
{
  OBJECT-PROPERTIES
  {
    Date=15/09/15;
    Time=12:00:00;
    Version List=NAVFR9.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      CompanyInfo@1120008 : Record 79;
      TempIntrastatJnlBatch@1120005 : TEMPORARY Record 262;
      TempIntrastatJnlLine@1120006 : TEMPORARY Record 263;
      FileMgt@1170000000 : Codeunit 419;
      XMLDomMgt@1170000001 : Codeunit 6224;
      OutputFile@1120002 : File;
      TempFileName@1120000 : Text;
      ClientFileName@1120001 : Text;
      Text001@1120004 : TextConst 'ENU=There is nothing to export.;FRA=Il n''y a rien … exporter.';
      Text002@1120009 : TextConst 'ENU=must be positive;FRA=doit ˆtre de signe positif';
      Text003@1120007 : TextConst 'ENU=must not start with zero;FRA=ne doit pas commencer par z‚ro';

    PROCEDURE ExportToXML@1120000(VAR IntrastatJnlLine@1120004 : Record 263;ObligationLevel@1120002 : Integer;FileName@1120001 : Text) : Boolean;
    VAR
      OutputStream@1120003 : OutStream;
      LastDeclarationId@1120006 : Integer;
    BEGIN
      CompanyInfo.GET;
      CheckMandatoryCompanyInfo;

      CheckJnlLines(IntrastatJnlLine);
      InsertTempJnlLines(IntrastatJnlLine);

      ClientFileName := FileName;
      CreateFile(OutputStream);

      LastDeclarationId := CompanyInfo."Last Intrastat Declaration ID";
      GenerateXML(OutputStream,LastDeclarationId,ObligationLevel);
      UpdateLastDeclarationId(LastDeclarationId);

      UpdateBatchReported(IntrastatJnlLine);

      CloseFile;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CreateFile@1220007(VAR OutputStream@1120000 : OutStream);
    VAR
      TierAutoMgt@1120001 : Codeunit 419;
    BEGIN
      OutputFile.TEXTMODE(TRUE);
      OutputFile.WRITEMODE(TRUE);
      TempFileName := TierAutoMgt.ServerTempFileName('.xml');
      OutputFile.CREATE(TempFileName);
      OutputFile.CREATEOUTSTREAM(OutputStream);
    END;

    LOCAL PROCEDURE CloseFile@1220006();
    BEGIN
      OutputFile.CLOSE;
      FileMgt.DownloadToFile(TempFileName,ClientFileName);
    END;

    LOCAL PROCEDURE CheckMandatoryCompanyInfo@1120001();
    BEGIN
      CompanyInfo.TESTFIELD(CISD);
      CompanyInfo.TESTFIELD("Registration No.");
      CompanyInfo.TESTFIELD("VAT Registration No.");
      CompanyInfo.TESTFIELD(Name);
    END;

    LOCAL PROCEDURE UpdateLastDeclarationId@1120003(LastDeclarationId@1120001 : Integer);
    BEGIN
      CompanyInfo.GET;
      CompanyInfo."Last Intrastat Declaration ID" := LastDeclarationId;
      CompanyInfo.MODIFY;
    END;

    LOCAL PROCEDURE CheckJnlLines@1120034(VAR IntrastatJnlLine@1120000 : Record 263);
    BEGIN
      IF IntrastatJnlLine.ISEMPTY THEN
        ERROR(Text001);

      IntrastatJnlLine.FINDFIRST;
      ValidateJnlBatch(IntrastatJnlLine);

      IntrastatJnlLine.SETCURRENTKEY(Type);
      IF IntrastatJnlLine.FINDSET THEN
        REPEAT
          ValidateJnlLine(IntrastatJnlLine);
        UNTIL IntrastatJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE ValidateJnlBatch@1120004(IntrastatJnlLine@1120000 : Record 263);
    VAR
      IntrastatJnlBatch@1120001 : Record 262;
    BEGIN
      IntrastatJnlBatch.GET(IntrastatJnlLine."Journal Template Name",IntrastatJnlLine."Journal Batch Name");
      IntrastatJnlBatch.TESTFIELD("Statistics Period");
      IntrastatJnlBatch.TESTFIELD(Reported,FALSE);
    END;

    LOCAL PROCEDURE ValidateJnlLine@1120023(IntrastatJnlLine@1120000 : Record 263);
    BEGIN
      IntrastatJnlLine.TESTFIELD("Journal Template Name");
      IntrastatJnlLine.TESTFIELD("Journal Batch Name");
      IntrastatJnlLine.TESTFIELD("Transaction Specification");
      IF IntrastatJnlLine."Transaction Type" <> '' THEN
        IF COPYSTR(IntrastatJnlLine."Transaction Type",1,1) = '0' THEN
          IntrastatJnlLine.FIELDERROR("Transaction Type",Text003);

      IF IntrastatJnlLine."Statistical Value" <= 0 THEN
        IntrastatJnlLine.FIELDERROR("Statistical Value",Text002);
      IF IntrastatJnlLine.Quantity <= 0 THEN
        IntrastatJnlLine.FIELDERROR(Quantity,Text002);
    END;

    LOCAL PROCEDURE InsertTempJnlLines@1120021(VAR IntrastatJnlLine@1220002 : Record 263);
    VAR
      Type@1120000 : Integer;
      FlowCode@1120002 : Text[1];
    BEGIN
      Type := -1;
      IntrastatJnlLine.SETCURRENTKEY(Type);
      IF IntrastatJnlLine.FINDSET THEN
        REPEAT
          IF Type <> IntrastatJnlLine.Type THEN BEGIN
            FlowCode := GetFlowCode(IntrastatJnlLine.Type);
            InsertTempJnlBatch(IntrastatJnlLine,FlowCode);
            Type := IntrastatJnlLine.Type;
          END;
          InsertTempJnlLine(IntrastatJnlLine,FlowCode);
        UNTIL IntrastatJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertTempJnlBatch@1120028(IntrastatJnlLine@1120001 : Record 263;FlowCode@1120000 : Text[1]);
    VAR
      IntrastatJnlBatch@1120002 : Record 262;
    BEGIN
      IntrastatJnlBatch.GET(IntrastatJnlLine."Journal Template Name",IntrastatJnlLine."Journal Batch Name");
      TempIntrastatJnlBatch := IntrastatJnlBatch;
      TempIntrastatJnlBatch."Journal Template Name" := FlowCode;
      TempIntrastatJnlBatch.INSERT;
    END;

    LOCAL PROCEDURE InsertTempJnlLine@1120027(IntrastatJnlLine@1120000 : Record 263;FlowCode@1120002 : Text[1]);
    BEGIN
      TempIntrastatJnlLine := IntrastatJnlLine;
      TempIntrastatJnlLine.Quantity := GetQtyInSU(IntrastatJnlLine);
      TempIntrastatJnlLine."Tariff No." := DELCHR(IntrastatJnlLine."Tariff No.");
      TempIntrastatJnlLine."Total Weight" := RoundValue(IntrastatJnlLine."Total Weight");
      TempIntrastatJnlLine."Statistical Value" := RoundValue(IntrastatJnlLine."Statistical Value");
      TempIntrastatJnlLine."Journal Template Name" := FlowCode;
      TempIntrastatJnlLine.INSERT;
    END;

    LOCAL PROCEDURE UpdateBatchReported@1120002(VAR IntrastatJnlLine@1120001 : Record 263);
    VAR
      IntrastatJnlBatch@1120000 : Record 262;
    BEGIN
      IntrastatJnlLine.FINDFIRST;
      IntrastatJnlBatch.GET(IntrastatJnlLine."Journal Template Name",IntrastatJnlLine."Journal Batch Name");
      IntrastatJnlBatch.Reported := TRUE;
      IntrastatJnlBatch.MODIFY;
    END;

    LOCAL PROCEDURE GetReferencePeriod@1220015(StatisticsPeriod@1120000 : Code[10]) : Text[30];
    BEGIN
      EXIT('20' + COPYSTR(StatisticsPeriod,1,2) + '-' + COPYSTR(StatisticsPeriod,3,2));
    END;

    LOCAL PROCEDURE GetFlowCode@1220041(IntrastatJnlLineType@1220000 : Integer) : Text[1];
    VAR
      IntrastatJnlLine@1120000 : Record 263;
    BEGIN
      IF IntrastatJnlLineType = IntrastatJnlLine.Type::Receipt THEN
        EXIT('A');
      EXIT('D');
    END;

    LOCAL PROCEDURE RoundValue@1220002(Value@1220000 : Decimal) : Integer;
    VAR
      IntValue@1120000 : Integer;
    BEGIN
      IF Value >= 1 THEN
        IntValue := ROUND(Value,1)
      ELSE
        IF Value = 0 THEN
          IntValue := 0
        ELSE
          IntValue := 1;
      EXIT(IntValue);
    END;

    LOCAL PROCEDURE FormatToXML@1120008(Number@1120000 : Decimal) : Text[30];
    BEGIN
      EXIT(FORMAT(Number,0,9));
    END;

    LOCAL PROCEDURE GetQtyInSU@1120022(IntrastatJnlLine@1120000 : Record 263) : Integer;
    VAR
      TariffNo@1120001 : Record 260;
    BEGIN
      IF TariffNo.GET(IntrastatJnlLine."Tariff No.") THEN BEGIN
        IF TariffNo."Supplementary Units" THEN
          EXIT(ROUND(IntrastatJnlLine.Quantity,1))
      END;
      EXIT(0);
    END;

    LOCAL PROCEDURE GenerateXML@1120005(OutputStream@1120003 : OutStream;VAR DeclarationId@1120002 : Integer;ObligationLevel@1120004 : Integer);
    VAR
      XMLCurrNode@1120001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDoc@1120000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
    BEGIN
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      XMLDoc.LoadXml := '<INSTAT/>';
      XMLCurrNode := XMLDoc.DocumentElement;
      XMLDomMgt.AddDeclaration(XMLDoc,'1.0','UTF-8','');

      AddHeader(XMLCurrNode);
      AddDeclarations(XMLCurrNode,DeclarationId,ObligationLevel);

      XMLDoc.Save(OutputStream);
    END;

    LOCAL PROCEDURE AddHeader@1120010(VAR XMLNode@1120000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      XMLDomMgt.AddGroupNode(XMLNode,'Envelope');
      XMLDomMgt.AddNode(XMLNode,'envelopeId',CompanyInfo.CISD);

      XMLDomMgt.AddGroupNode(XMLNode,'DateTime');
      XMLDomMgt.AddNode(XMLNode,'date',FORMAT(TODAY,0,9));
      XMLDomMgt.AddLastNode(XMLNode,'time',COPYSTR(FORMAT(TIME,0,9),1,8));

      XMLDomMgt.AddGroupNode(XMLNode,'Party');
      XMLDomMgt.AddAttribute(XMLNode,'partyType','PSI');
      XMLDomMgt.AddAttribute(XMLNode,'partyRole','sender');
      XMLDomMgt.AddNode(XMLNode,'partyId',CompanyInfo.GetPartyID);
      XMLDomMgt.AddLastNode(XMLNode,'partyName',CompanyInfo.Name);

      XMLDomMgt.AddNode(XMLNode,'softwareUsed','DynamicsNAV');
    END;

    LOCAL PROCEDURE AddDeclarations@1120051(VAR XMLNode@1120001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR DeclarationId@1120000 : Integer;ObligationLevel@1120002 : Integer);
    BEGIN
      IF TempIntrastatJnlBatch.FINDSET THEN
        REPEAT
          DeclarationId := DeclarationId + 1;
          AddDeclaration(XMLNode,TempIntrastatJnlBatch,DeclarationId,ObligationLevel);
          AddItems(XMLNode,TempIntrastatJnlBatch);
          XMLNode := XMLNode.ParentNode;
        UNTIL TempIntrastatJnlBatch.NEXT = 0;
    END;

    LOCAL PROCEDURE AddDeclaration@1120024(VAR XMLNode@1120000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";IntrastatJnlBatch@1120002 : Record 262;DeclarationId@1120001 : Integer;ObligationLevel@1120004 : Integer);
    BEGIN
      XMLDomMgt.AddGroupNode(XMLNode,'Declaration');
      XMLDomMgt.AddNode(XMLNode,'declarationId',FormatExtendNumberToXML(DeclarationId,6));
      XMLDomMgt.AddNode(XMLNode,'referencePeriod',GetReferencePeriod(IntrastatJnlBatch."Statistics Period"));
      XMLDomMgt.AddNode(XMLNode,'PSIId',CompanyInfo.GetPartyID);

      XMLDomMgt.AddGroupNode(XMLNode,'Function');
      XMLDomMgt.AddLastNode(XMLNode,'functionCode','O');

      XMLDomMgt.AddNode(XMLNode,'declarationTypeCode',FORMAT(ObligationLevel));
      XMLDomMgt.AddNode(XMLNode,'flowCode',IntrastatJnlBatch."Journal Template Name");
      XMLDomMgt.AddNode(XMLNode,'currencyCode','EUR');
    END;

    LOCAL PROCEDURE AddItems@1120052(VAR XMLNode@1120002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";IntrastatJnlBatch@1120000 : Record 262);
    VAR
      ItemNumberXML@1120001 : Integer;
    BEGIN
      TempIntrastatJnlLine.SETCURRENTKEY(Type);
      TempIntrastatJnlLine.SETRANGE("Journal Template Name",IntrastatJnlBatch."Journal Template Name");
      TempIntrastatJnlLine.SETRANGE("Journal Batch Name",IntrastatJnlBatch.Name);
      ItemNumberXML := 0;
      IF TempIntrastatJnlLine.FINDSET THEN
        REPEAT
          ItemNumberXML += 1;
          AddItem(XMLNode,TempIntrastatJnlLine,ItemNumberXML);
          XMLNode := XMLNode.ParentNode;
        UNTIL TempIntrastatJnlLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AddItem@1120053(VAR XMLNode@1120001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";IntrastatJnlLine@1120000 : Record 263;ItemNumberXML@1120002 : Integer);
    BEGIN
      XMLDomMgt.AddGroupNode(XMLNode,'Item');
      XMLDomMgt.AddNode(XMLNode,'itemNumber',FormatExtendNumberToXML(ItemNumberXML,6));
      IF IntrastatJnlLine."Tariff No." <> '' THEN BEGIN
        XMLDomMgt.AddGroupNode(XMLNode,'CN8');
        XMLDomMgt.AddLastNode(XMLNode,'CN8Code',IntrastatJnlLine."Tariff No.");
      END;
      IF IntrastatJnlLine."Country/Region of Origin Code" <> '' THEN
        XMLDomMgt.AddNode(XMLNode,'countryOfOriginCode',IntrastatJnlLine."Country/Region of Origin Code");
      IF IntrastatJnlLine."Total Weight" <> 0 THEN
        XMLDomMgt.AddNode(XMLNode,'netMass',FormatToXML(IntrastatJnlLine."Total Weight"));
      IF IntrastatJnlLine.Quantity <> 0 THEN
        XMLDomMgt.AddNode(XMLNode,'quantityInSU',FormatToXML(IntrastatJnlLine.Quantity));
      XMLDomMgt.AddNode(XMLNode,'invoicedAmount',FormatToXML(IntrastatJnlLine."Statistical Value"));
      IF IntrastatJnlLine."Cust. VAT Registration No." <> '' THEN
        XMLDomMgt.AddNode(XMLNode,'partnerId',IntrastatJnlLine."Cust. VAT Registration No.");
      XMLDomMgt.AddNode(XMLNode,'statisticalProcedureCode',IntrastatJnlLine."Transaction Specification");

      IF TempIntrastatJnlLine."Transaction Type" <> '' THEN BEGIN
        XMLDomMgt.AddGroupNode(XMLNode,'NatureOfTransaction');
        XMLDomMgt.AddNode(XMLNode,'natureOfTransactionACode',COPYSTR(TempIntrastatJnlLine."Transaction Type",1,1));
        IF COPYSTR(TempIntrastatJnlLine."Transaction Type",2,1) <> '0' THEN
          XMLDomMgt.AddNode(XMLNode,'natureOfTransactionBCode',COPYSTR(TempIntrastatJnlLine."Transaction Type",2,1));
        XMLNode := XMLNode.ParentNode;
      END;

      IF IntrastatJnlLine."Transport Method" <> '' THEN
        XMLDomMgt.AddNode(XMLNode,'modeOfTransportCode',IntrastatJnlLine."Transport Method");
    END;

    LOCAL PROCEDURE FormatExtendNumberToXML@1120006(Value@1120000 : Integer;Length@1120001 : Integer) : Text;
    BEGIN
      EXIT(
        FORMAT(
          Value,0,STRSUBSTNO('<Integer,%1><Filler Character,0>',Length)));
    END;

    BEGIN
    END.
  }
}

